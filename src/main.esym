D G "__PCH__" 0 1030 ""5.109""
D G "__DEVICE__" 0 1030 "2620"
D G "__DATE__" 0 1030 ""26-Oct-23""
D G "__TIME__" 0 1030 ""21:44:19""
D G "_UNICODE" 0 1030 ""?""
D G "__EVAL" 0 1030 ""?"" "Standard Header file for the PIC18F26K20 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
F N "set_tris_a" 2 43 ""
V L "value" 2 43 "int8" `55 
F B "set_tris_a" 2 43 "void(int8 value)" `54 
F N "set_tris_b" 2 44 ""
V L "value" 2 44 "int8" `57 
F B "set_tris_b" 2 44 "void(int8 value)" `56 
F N "set_tris_c" 2 45 ""
V L "value" 2 45 "int8" `59 
F B "set_tris_c" 2 45 "void(int8 value)" `58 
F N "set_tris_e" 2 46 ""
V L "value" 2 46 "int8" `61 
F B "set_tris_e" 2 46 "void(int8 value)" `60 
F N "get_tris_a" 2 47 ""
F B "get_tris_a" 2 47 "int8()" `62 
F N "get_tris_b" 2 48 ""
F B "get_tris_b" 2 48 "int8()" `63 
F N "get_tris_c" 2 49 ""
F B "get_tris_c" 2 49 "int8()" `64 
F N "get_tris_e" 2 50 ""
F B "get_tris_e" 2 50 "int8()" `65 
F N "output_a" 2 51 ""
V L "value" 2 51 "int8" `67 
F B "output_a" 2 51 "void(int8 value)" `66 
F N "output_b" 2 52 ""
V L "value" 2 52 "int8" `69 
F B "output_b" 2 52 "void(int8 value)" `68 
F N "output_c" 2 53 ""
V L "value" 2 53 "int8" `71 
F B "output_c" 2 53 "void(int8 value)" `70 
F N "output_e" 2 54 ""
V L "value" 2 54 "int8" `73 
F B "output_e" 2 54 "void(int8 value)" `72 
F N "input_a" 2 55 ""
F B "input_a" 2 55 "int8()" `74 
F N "input_b" 2 56 ""
F B "input_b" 2 56 "int8()" `75 
F N "input_c" 2 57 ""
F B "input_c" 2 57 "int8()" `76 
F N "input_e" 2 58 ""
F B "input_e" 2 58 "int8()" `77 
F N "input_change_a" 2 59 ""
F B "input_change_a" 2 59 "int8()" `78 
F N "input_change_b" 2 60 ""
F B "input_change_b" 2 60 "int8()" `79 
F N "input_change_c" 2 61 ""
F B "input_change_c" 2 61 "int8()" `80 
F N "input_change_e" 2 62 ""
F B "input_change_e" 2 62 "int8()" `81 
F N "port_b_pullups" 2 63 ""
V L "upmask" 2 63 "int8" `83 
F B "port_b_pullups" 2 63 "void(int8 upmask)" `82 
F N "set_slow_slew_a" 2 64 ""
V L "value" 2 64 "int8" `85 
F B "set_slow_slew_a" 2 64 "void(int8 value)" `84 
F N "set_slow_slew_b" 2 65 ""
V L "value" 2 65 "int8" `87 
F B "set_slow_slew_b" 2 65 "void(int8 value)" `86 
F N "set_slow_slew_c" 2 66 ""
V L "value" 2 66 "int8" `89 
F B "set_slow_slew_c" 2 66 "void(int8 value)" `88 
F N "set_slow_slew_e" 2 67 ""
V L "value" 2 67 "int8" `91 
F B "set_slow_slew_e" 2 67 "void(int8 value)" `90 
F N "input" 2 68 ""
V L "pin" 2 68 "int16" `93 
F B "input" 2 68 "int8(int16 pin)" `92 
F N "input_state" 2 69 ""
V L "pin" 2 69 "int16" `95 
F B "input_state" 2 69 "int8(int16 pin)" `94 
F N "output_low" 2 70 ""
V L "pin" 2 70 "int16" `97 
F B "output_low" 2 70 "void(int16 pin)" `96 
F N "output_high" 2 71 ""
V L "pin" 2 71 "int16" `99 
F B "output_high" 2 71 "void(int16 pin)" `98 
F N "output_toggle" 2 72 ""
V L "pin" 2 72 "int16" `101 
F B "output_toggle" 2 72 "void(int16 pin)" `100 
F N "output_bit" 2 73 ""
V L "pin" 2 73 "int16" `103 
V L "level" 2 73 "int8" `104 
F B "output_bit" 2 73 "void(int16 pin,int8 level)" `102 
F N "output_float" 2 74 ""
V L "pin" 2 74 "int16" `106 
F B "output_float" 2 74 "void(int16 pin)" `105 
F N "output_drive" 2 75 ""
V L "pin" 2 75 "int16" `108 
F B "output_drive" 2 75 "void(int16 pin)" `107  "Constants used to identify pins in the above are:"
D G "PIN_A0" 2 79 "31744"
D G "PIN_A1" 2 80 "31745"
D G "PIN_A2" 2 81 "31746"
D G "PIN_A3" 2 82 "31747"
D G "PIN_A4" 2 83 "31748"
D G "PIN_A5" 2 84 "31749"
D G "PIN_A6" 2 85 "31750"
D G "PIN_A7" 2 86 "31751"
D G "PIN_B0" 2 88 "31752"
D G "PIN_B1" 2 89 "31753"
D G "PIN_B2" 2 90 "31754"
D G "PIN_B3" 2 91 "31755"
D G "PIN_B4" 2 92 "31756"
D G "PIN_B5" 2 93 "31757"
D G "PIN_B6" 2 94 "31758"
D G "PIN_B7" 2 95 "31759"
D G "PIN_C0" 2 97 "31760"
D G "PIN_C1" 2 98 "31761"
D G "PIN_C2" 2 99 "31762"
D G "PIN_C3" 2 100 "31763"
D G "PIN_C4" 2 101 "31764"
D G "PIN_C5" 2 102 "31765"
D G "PIN_C6" 2 103 "31766"
D G "PIN_C7" 2 104 "31767"
D G "PIN_E3" 2 106 "31779"
D G "FALSE" 2 109 "0"
D G "TRUE" 2 110 "1"
D G "BYTE" 2 112 "int8"
D G "BOOLEAN" 2 113 "int1"
D G "getc" 2 115 "getch"
D G "fgetc" 2 116 "getch"
D G "getchar" 2 117 "getch"
D G "putc" 2 118 "putchar"
D G "fputc" 2 119 "putchar"
D G "fgets" 2 120 "gets"
D G "fputs" 2 121 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
F N "restart_cause" 2 126 ""
F B "restart_cause" 2 126 "int8()" `109 
F N "reset_cpu" 2 127 ""
F B "reset_cpu" 2 127 "void()" `110 
F N "sleep" 2 128 ""
F B "sleep" 2 128 "void()" `111 
F N "sleep" 2 129 ""
V L "type" 2 129 "int8" `113 
F B "sleep" 2 129 "void(int8 type)" `112  "Constants returned from RESTART_CAUSE() are:"
D G "WDT_TIMEOUT" 2 131 "7"
D G "MCLR_FROM_SLEEP" 2 132 "11"
D G "MCLR_FROM_RUN" 2 133 "15"
D G "NORMAL_POWER_UP" 2 134 "12"
D G "BROWNOUT_RESTART" 2 135 "14"
D G "WDT_FROM_SLEEP" 2 136 "3"
D G "RESET_INSTRUCTION" 2 137 "0"
D G "SLEEP_FULL" 2 140 "0" "Default"
D G "SLEEP_IDLE" 2 141 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
F N "setup_timer_0" 2 148 ""
V L "mode" 2 148 "int8" `115 
F B "setup_timer_0" 2 148 "void(int8 mode)" `114 
F N "set_timer0" 2 149 ""
V L "value" 2 149 "int16" `117 
F B "set_timer0" 2 149 "void(int16 value)" `116 
F N "get_timer0" 2 150 ""
F B "get_timer0" 2 150 "int16()" `118 
F N "setup_counters" 2 151 ""
V L "mode" 2 151 "int8" `120 
V L "prescaler" 2 151 "int8" `121 
F B "setup_counters" 2 151 "void(int8 mode,int8 prescaler)" `119 
F N "set_rtcc" 2 152 ""
V L "value" 2 152 "int16" `123 
F B "set_rtcc" 2 152 "void(int16 value)" `122 
F N "get_rtcc" 2 153 ""
F B "get_rtcc" 2 153 "int16()" `124  "Constants used for SETUP_TIMER_0() are:"
D G "T0_INTERNAL" 2 155 "0"
D G "T0_EXT_L_TO_H" 2 156 "32"
D G "T0_EXT_H_TO_L" 2 157 "48"
D G "T0_DIV_1" 2 159 "8"
D G "T0_DIV_2" 2 160 "0"
D G "T0_DIV_4" 2 161 "1"
D G "T0_DIV_8" 2 162 "2"
D G "T0_DIV_16" 2 163 "3"
D G "T0_DIV_32" 2 164 "4"
D G "T0_DIV_64" 2 165 "5"
D G "T0_DIV_128" 2 166 "6"
D G "T0_DIV_256" 2 167 "7"
D G "T0_OFF" 2 169 "0x80"
D G "T0_8_BIT" 2 171 "0x40"
D G "RTCC_INTERNAL" 2 175 "0"
D G "RTCC_EXT_L_TO_H" 2 176 "32"
D G "RTCC_EXT_H_TO_L" 2 177 "48"
D G "RTCC_DIV_1" 2 178 "8"
D G "RTCC_DIV_2" 2 179 "0"
D G "RTCC_DIV_4" 2 180 "1"
D G "RTCC_DIV_8" 2 181 "2"
D G "RTCC_DIV_16" 2 182 "3"
D G "RTCC_DIV_32" 2 183 "4"
D G "RTCC_DIV_64" 2 184 "5"
D G "RTCC_DIV_128" 2 185 "6"
D G "RTCC_DIV_256" 2 186 "7"
D G "RTCC_OFF" 2 187 "0x80"
D G "RTCC_8_BIT" 2 188 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
F N "setup_wdt" 2 199 ""
V L "mode" 2 199 "int16" `126 
F B "setup_wdt" 2 199 "void(int16 mode)" `125 
F N "restart_wdt" 2 200 ""
F B "restart_wdt" 2 200 "void()" `127  "Constants used for SETUP_WDT() are:"
D G "WDT_ON" 2 202 "0x100"
D G "WDT_OFF" 2 203 "0"
D G "WDT_4MS" 2 205 "0x300"
D G "WDT_8MS" 2 206 "0x500"
D G "WDT_16MS" 2 207 "0x700"
D G "WDT_32MS" 2 208 "0x900"
D G "WDT_64MS" 2 209 "0xB00"
D G "WDT_128MS" 2 210 "0xD00"
D G "WDT_256MS" 2 211 "0xF00"
D G "WDT_512MS" 2 212 "0x1100"
D G "WDT_1S" 2 213 "0x1300"
D G "WDT_2S" 2 214 "0x1500"
D G "WDT_4S" 2 215 "0x1700"
D G "WDT_8S" 2 216 "0x1900"
D G "WDT_16S" 2 217 "0x1B00"
D G "WDT_32S" 2 218 "0x1D00"
D G "WDT_64S" 2 219 "0x1F00"
D G "WDT_128S" 2 220 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
F N "setup_timer_1" 2 225 ""
V L "mode" 2 225 "int16" `129 
F B "setup_timer_1" 2 225 "void(int16 mode)" `128 
F N "get_timer1" 2 226 ""
F B "get_timer1" 2 226 "int16()" `130 
F N "set_timer1" 2 227 ""
V L "value" 2 227 "int16" `132 
F B "set_timer1" 2 227 "void(int16 value)" `131  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 2 230 "0"
D G "T1_INTERNAL" 2 231 "0x85"
D G "T1_EXTERNAL" 2 232 "0x87"
D G "T1_EXTERNAL_SYNC" 2 233 "0x83"
D G "T1_CLK_OUT" 2 235 "8"
D G "T1_DIV_BY_1" 2 237 "0"
D G "T1_DIV_BY_2" 2 238 "0x10"
D G "T1_DIV_BY_4" 2 239 "0x20"
D G "T1_DIV_BY_8" 2 240 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
F N "setup_timer_2" 2 245 ""
V L "mode" 2 245 "int8" `134 
V L "period" 2 245 "int8" `135 
V L "postscale" 2 245 "int8" `136 
F B "setup_timer_2" 2 245 "void(int8 mode,int8 period,int8 postscale)" `133 
F N "get_timer2" 2 246 ""
F B "get_timer2" 2 246 "int8()" `137 
F N "set_timer2" 2 247 ""
V L "value" 2 247 "int8" `139 
F B "set_timer2" 2 247 "void(int8 value)" `138  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 2 249 "0"
D G "T2_DIV_BY_1" 2 250 "4"
D G "T2_DIV_BY_4" 2 251 "5"
D G "T2_DIV_BY_16" 2 252 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
F N "setup_timer_3" 2 257 ""
V L "mode" 2 257 "int16" `141 
F B "setup_timer_3" 2 257 "void(int16 mode)" `140 
F N "get_timer3" 2 258 ""
F B "get_timer3" 2 258 "int16()" `142 
F N "set_timer3" 2 259 ""
V L "value" 2 259 "int16" `144 
F B "set_timer3" 2 259 "void(int16 value)" `143  "Constants used for SETUP_TIMER_3() are:"
D G "T3_DISABLED" 2 262 "0"
D G "T3_INTERNAL" 2 263 "0x85"
D G "T3_EXTERNAL" 2 264 "0x87"
D G "T3_EXTERNAL_SYNC" 2 265 "0x83"
D G "T3_DIV_BY_1" 2 267 "0"
D G "T3_DIV_BY_2" 2 268 "0x10"
D G "T3_DIV_BY_4" 2 269 "0x20"
D G "T3_DIV_BY_8" 2 270 "0x30"
D G "T3_CCP1_TO_2" 2 273 "0x48"
D G "T3_CCP2" 2 274 "0x8"
c L "set_timer3" 2 3 4 "FUNCTION"
F N "setup_ccp1" 2 280 ""
V L "mode" 2 280 "int32" `146 
F B "setup_ccp1" 2 280 "void(int32 mode)" `145 
F N "setup_ccp1" 2 281 ""
V L "mode" 2 281 "int32" `148 
V L "pwm" 2 281 "int8" `149 
F B "setup_ccp1" 2 281 "void(int32 mode,int8 pwm)" `147 
F N "set_pwm1_duty" 2 282 ""
V L "value" 2 282 "int8" `151 
F B "set_pwm1_duty" 2 282 "void(int8 value)" `150 
F N "set_pwm1_duty" 2 283 ""
V L "value" 2 283 "int16" `153 
F B "set_pwm1_duty" 2 283 "void(int16 value)" `152  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 2 285 "0"
D G "CCP_CAPTURE_FE" 2 286 "0x04"
D G "CCP_CAPTURE_RE" 2 287 "0x05"
D G "CCP_CAPTURE_DIV_4" 2 288 "0x06"
D G "CCP_CAPTURE_DIV_16" 2 289 "0x07"
D G "CCP_COMPARE_SET_ON_MATCH" 2 290 "0x08"
D G "CCP_COMPARE_CLR_ON_MATCH" 2 291 "0x09"
D G "CCP_COMPARE_INT" 2 292 "0x0A"
D G "CCP_COMPARE_INT_AND_TOGGLE" 2 293 "0x02"
D G "CCP_COMPARE_RESET_TIMER" 2 294 "0x0B"
D G "CCP_PWM" 2 295 "0x0C"
D G "CCP_PWM_PLUS_1" 2 296 "0x1c"
D G "CCP_PWM_PLUS_2" 2 297 "0x2c"
D G "CCP_PWM_PLUS_3" 2 298 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
D G "CCP_PWM_H_H" 2 306 "0x0c"
D G "CCP_PWM_H_L" 2 307 "0x0d"
D G "CCP_PWM_L_H" 2 308 "0x0e"
D G "CCP_PWM_L_L" 2 309 "0x0f"
D G "CCP_PWM_FULL_BRIDGE" 2 311 "0x40"
D G "CCP_PWM_FULL_BRIDGE_REV" 2 312 "0xC0"
D G "CCP_PWM_HALF_BRIDGE" 2 313 "0x80"
D G "CCP_SHUTDOWN_ON_COMP1" 2 315 "0x100000"
D G "CCP_SHUTDOWN_ON_COMP2" 2 316 "0x200000"
D G "CCP_SHUTDOWN_ON_COMP" 2 317 "0x300000"
D G "CCP_SHUTDOWN_ON_INT0" 2 318 "0x400000"
D G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 319 "0x500000"
D G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 320 "0x600000"
D G "CCP_SHUTDOWN_ON_COMP_INT0" 2 321 "0x700000"
D G "CCP_SHUTDOWN_AC_L" 2 323 "0x000000"
D G "CCP_SHUTDOWN_AC_H" 2 324 "0x040000"
D G "CCP_SHUTDOWN_AC_F" 2 325 "0x080000"
D G "CCP_SHUTDOWN_BD_L" 2 327 "0x000000"
D G "CCP_SHUTDOWN_BD_H" 2 328 "0x010000"
D G "CCP_SHUTDOWN_BD_F" 2 329 "0x020000"
D G "CCP_SHUTDOWN_RESTART" 2 331 "0x80000000"
D G "CCP_PULSE_STEERING_A" 2 333 "0x01000000"
D G "CCP_PULSE_STEERING_B" 2 334 "0x02000000"
D G "CCP_PULSE_STEERING_C" 2 335 "0x04000000"
D G "CCP_PULSE_STEERING_D" 2 336 "0x08000000"
D G "CCP_PULSE_STEERING_SYNC" 2 337 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
F N "setup_ccp2" 2 340 ""
V L "mode" 2 340 "int32" `158 
F B "setup_ccp2" 2 340 "void(int32 mode)" `157 
F N "setup_ccp2" 2 341 ""
V L "mode" 2 341 "int32" `160 
V L "pwm" 2 341 "int8" `161 
F B "setup_ccp2" 2 341 "void(int32 mode,int8 pwm)" `159 
F N "set_pwm2_duty" 2 342 ""
V L "value" 2 342 "int8" `163 
F B "set_pwm2_duty" 2 342 "void(int8 value)" `162 
F N "set_pwm2_duty" 2 343 ""
V L "value" 2 343 "int16" `165 
F B "set_pwm2_duty" 2 343 "void(int16 value)" `164 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
F N "setup_spi" 2 351 ""
V L "mode" 2 351 "int32" `170 
F B "setup_spi" 2 351 "void(int32 mode)" `169 
F N "spi_write" 2 352 ""
V L "value" 2 352 "int8" `172 
F B "spi_write" 2 352 "void(int8 value)" `171 
F N "spi_write" 2 353 ""
V L "wait" 2 353 "int8" `174 
V L "value" 2 353 "int8" `175 
F B "spi_write" 2 353 "void(int8 wait,int8 value)" `173 
F N "spi_read" 2 354 ""
F B "spi_read" 2 354 "int8()" `176 
F N "spi_read" 2 355 ""
V L "value" 2 355 "int8" `178 
F B "spi_read" 2 355 "int8(int8 value)" `177 
F N "spi_data_is_in" 2 356 ""
F B "spi_data_is_in" 2 356 "int8()" `179 
F N "setup_spi2" 2 357 ""
V L "mode" 2 357 "int32" `181 
F B "setup_spi2" 2 357 "void(int32 mode)" `180 
F N "spi_write2" 2 358 ""
V L "value" 2 358 "int8" `183 
F B "spi_write2" 2 358 "void(int8 value)" `182 
F N "spi_read2" 2 359 ""
F B "spi_read2" 2 359 "int8()" `184 
F N "spi_read2" 2 360 ""
V L "value" 2 360 "int8" `186 
F B "spi_read2" 2 360 "int8(int8 value)" `185 
F N "spi_data_is_in2" 2 361 ""
F B "spi_data_is_in2" 2 361 "int8()" `187  "Constants used in SETUP_SPI() are:"
D G "SPI_DISABLED" 2 363 "0x00"
D G "SPI_MASTER" 2 364 "0x20"
D G "SPI_SLAVE" 2 365 "0x24"
D G "SPI_SCK_IDLE_HIGH" 2 366 "0x10"
D G "SPI_SCK_IDLE_LOW" 2 367 "0x00"
D G "SPI_CLK_DIV_4" 2 368 "0x00"
D G "SPI_CLK_DIV_16" 2 369 "0x01"
D G "SPI_CLK_DIV_64" 2 370 "0x02"
D G "SPI_CLK_T2" 2 371 "0x03"
D G "SPI_SS_DISABLED" 2 372 "0x01"
D G "SPI_XMIT_L_TO_H" 2 374 "0x4000"
D G "SPI_XMIT_H_TO_L" 2 375 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 2 377 "0x0000"
D G "SPI_SAMPLE_AT_END" 2 378 "0x8000"
D G "SPI_L_TO_H" 2 381 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 2 382 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 2 "FUNCTION"
F N "setup_uart" 2 386 ""
V L "baud" 2 386 "int32" `189 
F B "setup_uart" 2 386 "void(int32 baud)" `188 
F N "setup_uart" 2 387 ""
V L "baud" 2 387 "int32" `191 
V L "stream" 2 387 "int8" `192 
F B "setup_uart" 2 387 "void(int32 baud,int8 stream)" `190 
F N "setup_uart" 2 388 ""
V L "baud" 2 388 "int32" `194 
V L "stream" 2 388 "int8" `195 
V L "clock" 2 388 "int32" `196 
F B "setup_uart" 2 388 "void(int32 baud,int8 stream,int32 clock)" `193 
F N "set_uart_speed" 2 389 ""
V L "baud" 2 389 "int32" `198 
F B "set_uart_speed" 2 389 "void(int32 baud)" `197 
F N "set_uart_speed" 2 390 ""
V L "baud" 2 390 "int32" `200 
V L "stream" 2 390 "int8" `201 
F B "set_uart_speed" 2 390 "void(int32 baud,int8 stream)" `199 
F N "set_uart_speed" 2 391 ""
V L "baud" 2 391 "int32" `203 
V L "stream" 2 391 "int8" `204 
V L "clock" 2 391 "int32" `205 
F B "set_uart_speed" 2 391 "void(int32 baud,int8 stream,int32 clock)" `202  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 2 395 "2"
D G "UART_DATA" 2 396 "4"
D G "UART_AUTODETECT" 2 397 "8"
D G "UART_AUTODETECT_NOWAIT" 2 398 "9"
D G "UART_WAKEUP_ON_RDA" 2 399 "10"
D G "UART_SEND_BREAK" 2 400 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
F N "setup_comparator" 2 405 ""
V L "mode" 2 405 "int32" `207 
F B "setup_comparator" 2 405 "void(int32 mode)" `206  "Constants used in setup_comparator() are:"
D G "NC_NC_NC_NC" 2 408 "0x404"
D G "NC_NC" 2 409 "0x404"
D G "CP1_A0_A3" 2 412 "0x4000088"
D G "CP1_A1_A3" 2 413 "0x0100089"
D G "CP1_B3_A3" 2 414 "0x020008A"
D G "CP1_B1_A3" 2 415 "0x040008B"
D G "CP1_A0_VREF" 2 416 "0x400008C"
D G "CP1_A1_VREF" 2 417 "0x010008D"
D G "CP1_B3_VREF" 2 418 "0x020008E"
D G "CP1_B1_VREF" 2 419 "0x040008F"
D G "CP1_OUT_ON_A4" 2 421 "0x2000020"
D G "CP1_INVERT" 2 422 "0x0000010"
D G "CP1_FAST" 2 423 "0x0000008"
D G "CP2_A0_A2" 2 426 "0x4008800"
D G "CP2_A1_A2" 2 427 "0x0108900"
D G "CP2_B3_A2" 2 428 "0x0208A00"
D G "CP2_B1_A2" 2 429 "0x0408B00"
D G "CP2_A0_VREF" 2 430 "0x4008C00"
D G "CP2_A1_VREF" 2 431 "0x0108D00"
D G "CP2_B3_VREF" 2 432 "0x0208E00"
D G "CP2_B1_VREF" 2 433 "0x0408F00"
D G "CP2_OUT_ON_A5" 2 435 "0x0082000"
D G "CP2_INVERT" 2 436 "0x0001000"
D G "CP2_FAST" 2 437 "0x0000800"
c L "setup_comparator" 2 3 2 "FUNCTION"
F N "setup_vref" 2 444 ""
V L "mode" 2 444 "int16" `211 
F B "setup_vref" 2 444 "void(int16 mode)" `210  "Constants used in setup_vref() are:"
D G "VREF_LOW" 2 446 "0xA0"
D G "VREF_HIGH" 2 447 "0x80"
D G "VREF_EXT" 2 448 "0x10" "Range for ref gen VREF- to VREF+"
D G "VREF_FVR" 2 449 "0x8000"
c L "setup_vref" 2 3 3 "FUNCTION"
F N "setup_low_volt_detect" 2 454 ""
V L "mode" 2 454 "int8" `213 
F B "setup_low_volt_detect" 2 454 "void(int8 mode)" `212  "Constants used in setup_low_volt_detect() are:"
D G "LVD_LVDIN" 2 456 "0x1F"
D G "LVD_35" 2 457 "0x1E"
D G "LVD_33" 2 458 "0x1D"
D G "LVD_30" 2 459 "0x1C"
D G "LVD_29" 2 460 "0x1B"
D G "LVD_28" 2 461 "0x1A"
D G "LVD_27" 2 462 "0x19"
D G "LVD_26" 2 463 "0x18"
D G "LVD_25" 2 464 "0x17"
D G "LVD_24" 2 465 "0x16"
D G "LVD_23" 2 466 "0x15"
D G "LVD_22" 2 467 "0x14"
D G "LVD_21" 2 468 "0x13"
D G "LVD_20" 2 469 "0x12"
D G "LVD_19" 2 470 "0x11"
D G "LVD_18" 2 471 "0x10"
D G "LVD_TRIGGER_BELOW" 2 473 "0"
D G "LVD_TRIGGER_ABOVE" 2 474 "0x80"
D G "LVD_INTERRUPT" 2 475 "0x20"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
F N "setup_oscillator" 2 480 ""
V L "mode" 2 480 "int16" `215 
F B "setup_oscillator" 2 480 "int8(int16 mode)" `214 
F N "setup_oscillator" 2 481 ""
V L "mode" 2 481 "int16" `217 
V L "tune" 2 481 "sint8" `218 
F B "setup_oscillator" 2 481 "int8(int16 mode,sint8 tune)" `216  "Constants used in setup_oscillator() are:"
D G "OSC_PLL_ON" 2 483 "0x4000"
D G "OSC_PLL_OFF" 2 484 "0"
D G "OSC_31250" 2 485 "0x8000"
D G "OSC_31KHZ" 2 486 "0x00"
D G "OSC_250KHZ" 2 487 "0x10"
D G "OSC_500KHZ" 2 488 "0x20"
D G "OSC_1MHZ" 2 489 "0x30"
D G "OSC_2MHZ" 2 490 "0x40"
D G "OSC_4MHZ" 2 491 "0x50"
D G "OSC_8MHZ" 2 492 "0x60"
D G "OSC_16MHZ" 2 493 "0x70"
D G "OSC_32MHZ" 2 494 "0x4060"
D G "OSC_64MHZ" 2 495 "0x4070"
D G "OSC_TIMER1" 2 497 "1"
D G "OSC_INTRC" 2 498 "2"
D G "OSC_NORMAL" 2 499 "0"
D G "OSC_IDLE_MODE" 2 501 "0x80"
D G "OSC_STATE_STABLE" 2 505 "4"
D G "OSC_STATE_EXT_RUNNING" 2 506 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
F N "setup_adc" 2 513 ""
V L "mode" 2 513 "int16" `220 
F B "setup_adc" 2 513 "void(int16 mode)" `219 
F N "read_adc" 2 514 ""
F B "read_adc" 2 514 "int8()" `221 
F N "read_adc" 2 515 ""
V L "mode" 2 515 "int8" `223 
F B "read_adc" 2 515 "int8(int8 mode)" `222 
F N "read_adc" 2 516 ""
f G "read_adc" 2 516 "int16()" `224 
F N "read_adc" 2 517 ""
V L "mode" 2 517 "int8" `225 
f G "read_adc" 2 517 "int16(int8 mode,int32 pins)" `224 
F N "adc_done" 2 518 ""
F B "adc_done" 2 518 "int8(int8 mode,int32 pins)" `224  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 2 520 "0" "ADC Off"
D G "ADC_CLOCK_DIV_2" 2 521 "0x100"
D G "ADC_CLOCK_DIV_4" 2 522 "0x04"
D G "ADC_CLOCK_DIV_8" 2 523 "0x01"
D G "ADC_CLOCK_DIV_16" 2 524 "0x05"
D G "ADC_CLOCK_DIV_32" 2 525 "0x02"
D G "ADC_CLOCK_DIV_64" 2 526 "0x06"
D G "ADC_CLOCK_INTERNAL" 2 527 "0x07" "Internal 2-6us"
D G "ADC_TAD_MUL_0" 2 529 "0x00"
D G "ADC_TAD_MUL_2" 2 530 "0x08"
D G "ADC_TAD_MUL_4" 2 531 "0x10"
D G "ADC_TAD_MUL_6" 2 532 "0x18"
D G "ADC_TAD_MUL_8" 2 533 "0x20"
D G "ADC_TAD_MUL_12" 2 534 "0x28"
D G "ADC_TAD_MUL_16" 2 535 "0x30"
D G "ADC_TAD_MUL_20" 2 536 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
F N "setup_adc_ports" 2 539 ""
V L "pins" 2 539 "int32" `226 
F B "setup_adc_ports" 2 539 "void(int32 pins)" `225 
F N "setup_adc_ports" 2 540 ""
V L "pins" 2 540 "int32" `228 
V L "reference" 2 540 "int32" `229 
F B "setup_adc_ports" 2 540 "void(int32 pins,int32 reference)" `227 
F N "set_analog_pins" 2 541 ""
V L "pins" 2 541 "int32" `231 
F B "set_analog_pins" 2 541 "void(int32 pins)" `230 
F N "set_analog_pins" 2 542 ""
V L "pins" 2 542 "int32" `233 
V L "reference" 2 542 "int32" `234 
F B "set_analog_pins" 2 542 "void(int32 pins,int32 reference)" `232 
F N "set_adc_channel" 2 543 ""
V L "channel" 2 543 "int8" `236 
F B "set_adc_channel" 2 543 "void(int8 channel)" `235  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
D G "sAN0" 2 547 "0x10000" "| A0"
D G "sAN1" 2 548 "0x20000" "| A1"
D G "sAN2" 2 549 "0x40000" "| A2"
D G "sAN3" 2 550 "0x80000" "| A3"
D G "sAN4" 2 551 "0x100000" "| A5"
D G "sAN5" 2 552 "0x200000" "| E0"
D G "sAN6" 2 553 "0x400000" "| E1"
D G "sAN7" 2 554 "0x800000" "| E2"
D G "sAN8" 2 555 "0x1" "| B2"
D G "sAN9" 2 556 "0x2" "| B3"
D G "sAN10" 2 557 "0x4" "| B1"
D G "sAN11" 2 558 "0x8" "| B4"
D G "sAN12" 2 559 "0x10" "| B0"
D G "NO_ANALOGS" 2 560 "0" "None"
D G "ALL_ANALOG" 2 561 "0xFF001F" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
D G "VSS_VDD" 2 564 "0x0000" "| Range 0-Vdd"
D G "VSS_VREF" 2 565 "0x1000" "| Range 0-Vref"
D G "VREF_VREF" 2 566 "0x3000" "| Range Vref-Vref"
D G "VREF_VDD" 2 567 "0x2000" "| Range Vref-Vdd"
D G "ADC_START_AND_READ" 2 570 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 2 571 "1"
D G "ADC_READ_ONLY" 2 572 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
F N "abs" 2 578 ""
V L "x" 2 578 "sint8" `238 
F B "abs" 2 578 "sint8(sint8 x)" `237 
F N "abs" 2 579 ""
V L "x" 2 579 "sint16" `240 
F B "abs" 2 579 "sint16(sint16 x)" `239 
F N "abs" 2 580 ""
V L "x" 2 580 "sint32" `242 
F B "abs" 2 580 "sint32(sint32 x)" `241 
F N "abs" 2 581 ""
V L "x" 2 581 "float" `244 
F B "abs" 2 581 "float(float x)" `243 
F N "_mul" 2 582 ""
V L "??65535" 2 582 "int8" `246 
V L "??65535" 2 582 "int8" `247 
F B "_mul" 2 582 "int16(int8 ,int8 )" `245 
F N "_mul" 2 583 ""
V L "??65535" 2 583 "sint8" `249 
V L "??65535" 2 583 "sint8" `250 
F B "_mul" 2 583 "sint16(sint8 ,sint8 )" `248 
F N "_mul" 2 584 ""
V L "??65535" 2 584 "int16" `252 
V L "??65535" 2 584 "int16" `253 
F B "_mul" 2 584 "int32(int16 ,int16 )" `251 
F N "_mul" 2 585 ""
V L "??65535" 2 585 "sint16" `255 
V L "??65535" 2 585 "sint16" `256 
F B "_mul" 2 585 "sint32(sint16 ,sint16 )" `254  "Memory Manipulation Prototypes:"
F N "read_bank" 2 588 ""
V L "bank" 2 588 "int8" `258 
V L "offset" 2 588 "int8" `259 
F B "read_bank" 2 588 "int8(int8 bank,int8 offset)" `257 
F N "write_bank" 2 589 ""
V L "bank" 2 589 "int8" `261 
V L "offset" 2 589 "int8" `262 
V L "value" 2 589 "int8" `263 
F B "write_bank" 2 589 "void(int8 bank,int8 offset,int8 value)" `260 
F N "strcpy" 2 590 ""
V L "dest" 2 590 "*int8" `265 
V L "src" 2 590 "*int8" `266 
F B "strcpy" 2 590 "void(*int8 dest,*int8 src)" `264 
F N "memset" 2 591 ""
V L "destination" 2 591 "*int8" `268 
V L "value" 2 591 "int8" `269 
V L "num" 2 591 "int16" `270 
F B "memset" 2 591 "void(*int8 destination,int8 value,int16 num)" `267 
F N "memcpy" 2 592 ""
V L "destination" 2 592 "*int8" `272 
V L "source" 2 592 "*int8" `273 
V L "num" 2 592 "int16" `274 
F B "memcpy" 2 592 "void(*int8 destination,*int8 source,int16 num)" `271  "String Prototypes:"
F N "toupper" 2 595 ""
V L "cvalue" 2 595 "int8" `276 
F B "toupper" 2 595 "int8(int8 cvalue)" `275 
F N "tolower" 2 596 ""
V L "cvalue" 2 596 "int8" `278 
F B "tolower" 2 596 "int8(int8 cvalue)" `277 
F N "sprintf" 2 597 ""
V L "string" 2 597 "*int8" `280 
V L "cstring" 2 597 "*int8" `281 
F B "sprintf" 2 597 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `279  "Data Manipulators Prototypes:"
F N "shift_left" 2 600 ""
V L "address" 2 600 "*int8" `284 
V L "bytes" 2 600 "int8" `285 
V L "value" 2 600 "int8" `286 
F B "shift_left" 2 600 "int8(*int8 address,int8 bytes,int8 value)" `283 
F N "shift_right" 2 601 ""
V L "address" 2 601 "*int8" `288 
V L "bytes" 2 601 "int8" `289 
V L "value" 2 601 "int8" `290 
F B "shift_right" 2 601 "int8(*int8 address,int8 bytes,int8 value)" `287 
F N "rotate_left" 2 602 ""
V L "address" 2 602 "*int8" `292 
V L "bytes" 2 602 "int8" `293 
F B "rotate_left" 2 602 "void(*int8 address,int8 bytes)" `291 
F N "rotate_right" 2 603 ""
V L "address" 2 603 "*int8" `295 
V L "bytes" 2 603 "int8" `296 
F B "rotate_right" 2 603 "void(*int8 address,int8 bytes)" `294 
F N "swap" 2 604 ""
V L "value" 2 604 "int8" `298 
F B "swap" 2 604 "void(int8 value)" `297 
F N "make8" 2 605 ""
V L "var" 2 605 "int16" `300 
V L "offset" 2 605 "int8" `301 
F B "make8" 2 605 "int8(int16 var,int8 offset)" `299 
F N "make8" 2 606 ""
V L "var" 2 606 "int32" `303 
V L "offset" 2 606 "int8" `304 
F B "make8" 2 606 "int8(int32 var,int8 offset)" `302 
F N "make16" 2 607 ""
V L "varhigh" 2 607 "int8" `306 
V L "varlow" 2 607 "int8" `307 
F B "make16" 2 607 "int16(int8 varhigh,int8 varlow)" `305 
F N "make32" 2 608 ""
V L "var1" 2 608 "int16" `309 
F B "make32" 2 608 "int32(int16 var1)" `308 
F N "make32" 2 609 ""
V L "var1" 2 609 "int16" `311 
V L "var2" 2 609 "int16" `312 
F B "make32" 2 609 "int32(int16 var1,int16 var2)" `310 
F N "make32" 2 610 ""
V L "var1" 2 610 "int16" `314 
V L "var2" 2 610 "int8" `315 
F B "make32" 2 610 "int32(int16 var1,int8 var2)" `313 
F N "make32" 2 611 ""
V L "var1" 2 611 "int16" `317 
V L "var2" 2 611 "int8" `318 
V L "var3" 2 611 "int8" `319 
F B "make32" 2 611 "int32(int16 var1,int8 var2,int8 var3)" `316 
F N "make32" 2 612 ""
V L "var1" 2 612 "int8" `321 
F B "make32" 2 612 "int32(int8 var1)" `320 
F N "make32" 2 613 ""
V L "var1" 2 613 "int8" `323 
V L "var2" 2 613 "int8" `324 
F B "make32" 2 613 "int32(int8 var1,int8 var2)" `322 
F N "make32" 2 614 ""
V L "var1" 2 614 "int8" `326 
V L "var2" 2 614 "int8" `327 
V L "var3" 2 614 "int8" `328 
F B "make32" 2 614 "int32(int8 var1,int8 var2,int8 var3)" `325 
F N "make32" 2 615 ""
V L "var1" 2 615 "int8" `330 
V L "var2" 2 615 "int8" `331 
V L "var3" 2 615 "int8" `332 
V L "var4" 2 615 "int8" `333 
F B "make32" 2 615 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `329 
F N "make32" 2 616 ""
V L "var1" 2 616 "int8" `335 
V L "var2" 2 616 "int16" `336 
F B "make32" 2 616 "int32(int8 var1,int16 var2)" `334 
F N "make32" 2 617 ""
V L "var1" 2 617 "int8" `338 
V L "var2" 2 617 "int16" `339 
V L "var3" 2 617 "int8" `340 
F B "make32" 2 617 "int32(int8 var1,int16 var2,int8 var3)" `337 
F N "make32" 2 618 ""
V L "var1" 2 618 "int8" `342 
V L "var2" 2 618 "int8" `343 
V L "var3" 2 618 "int16" `344 
F B "make32" 2 618 "int32(int8 var1,int8 var2,int16 var3)" `341 
F N "bit_set" 2 619 ""
V L "var" 2 619 "int8" `346 
V L "bit" 2 619 "int8" `347 
F B "bit_set" 2 619 "void(int8 var,int8 bit)" `345 
F N "bit_set" 2 620 ""
V L "var" 2 620 "int16" `349 
V L "bit" 2 620 "int8" `350 
F B "bit_set" 2 620 "void(int16 var,int8 bit)" `348 
F N "bit_set" 2 621 ""
V L "var" 2 621 "int32" `352 
V L "bit" 2 621 "int8" `353 
F B "bit_set" 2 621 "void(int32 var,int8 bit)" `351 
F N "bit_clear" 2 622 ""
V L "var" 2 622 "int8" `355 
V L "bit" 2 622 "int8" `356 
F B "bit_clear" 2 622 "void(int8 var,int8 bit)" `354 
F N "bit_clear" 2 623 ""
V L "var" 2 623 "int16" `358 
V L "bit" 2 623 "int8" `359 
F B "bit_clear" 2 623 "void(int16 var,int8 bit)" `357 
F N "bit_clear" 2 624 ""
V L "var" 2 624 "int32" `361 
V L "bit" 2 624 "int8" `362 
F B "bit_clear" 2 624 "void(int32 var,int8 bit)" `360 
F N "bit_test" 2 625 ""
V L "var" 2 625 "int8" `364 
V L "bit" 2 625 "int8" `365 
F B "bit_test" 2 625 "int8(int8 var,int8 bit)" `363 
F N "bit_test" 2 626 ""
V L "var" 2 626 "int16" `367 
V L "bit" 2 626 "int8" `368 
F B "bit_test" 2 626 "int8(int16 var,int8 bit)" `366 
F N "bit_test" 2 627 ""
V L "var" 2 627 "int32" `370 
V L "bit" 2 627 "int8" `371 
F B "bit_test" 2 627 "int8(int32 var,int8 bit)" `369  "#use delay() Prototypes:"
F N "delay_cycles" 2 630 ""
V L "count" 2 630 "int8" `373 
F B "delay_cycles" 2 630 "void(int8 count)" `372 
F N "delay_ms" 2 631 ""
V L "time" 2 631 "int16" `375 
F B "delay_ms" 2 631 "void(int16 time)" `374 
F N "delay_us" 2 632 ""
V L "time" 2 632 "int16" `377 
F B "delay_us" 2 632 "void(int16 time)" `376  "#use rs232() Prototypes:"
F N "putchar" 2 635 ""
V L "cdata" 2 635 "int8" `379 
F B "putchar" 2 635 "void(int8 cdata)" `378 
F N "putchar" 2 636 ""
V L "cdata" 2 636 "int8" `381 
V L "stream" 2 636 "int8" `382 
F B "putchar" 2 636 "void(int8 cdata,int8 stream)" `380 
F N "puts" 2 637 ""
V L "string" 2 637 "*int8" `384 
F B "puts" 2 637 "void(*int8 string)" `383 
F N "puts" 2 638 ""
V L "string" 2 638 "*int8" `386 
V L "stream" 2 638 "int8" `387 
F B "puts" 2 638 "void(*int8 string,int8 stream)" `385 
F N "getch" 2 639 ""
F B "getch" 2 639 "int8()" `388 
F N "getch" 2 640 ""
V L "stream" 2 640 "int8" `390 
F B "getch" 2 640 "int8(int8 stream)" `389 
F N "gets" 2 641 ""
V L "string" 2 641 "*int8" `392 
F B "gets" 2 641 "void(*int8 string)" `391 
F N "gets" 2 642 ""
V L "string" 2 642 "*int8" `394 
V L "stream" 2 642 "int8" `395 
F B "gets" 2 642 "void(*int8 string,int8 stream)" `393 
F N "kbhit" 2 643 ""
F B "kbhit" 2 643 "int8()" `396 
F N "kbhit" 2 644 ""
V L "stream" 2 644 "int8" `398 
F B "kbhit" 2 644 "int8(int8 stream)" `397 
F N "printf" 2 645 ""
V L "string" 2 645 "*int8" `400 
F B "printf" 2 645 "void(*int8 string,*int8 _VA_LIST)" `399 
F N "fprintf" 2 646 ""
V L "stream" 2 646 "int8" `403 
V L "string" 2 646 "*int8" `404 
F B "fprintf" 2 646 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `402 
F N "putc_send" 2 647 ""
F B "putc_send" 2 647 "void()" `406 
F N "fputc_send" 2 648 ""
V L "stream" 2 648 "int8" `408 
F B "fputc_send" 2 648 "void(int8 stream)" `407 
F N "rcv_buffer_full" 2 649 ""
F B "rcv_buffer_full" 2 649 "int8()" `409 
F N "rcv_buffer_full" 2 650 ""
V L "stream" 2 650 "int8" `411 
F B "rcv_buffer_full" 2 650 "int8(int8 stream)" `410 
F N "rcv_buffer_bytes" 2 651 ""
F B "rcv_buffer_bytes" 2 651 "int16()" `412 
F N "rcv_buffer_bytes" 2 652 ""
V L "stream" 2 652 "int8" `414 
F B "rcv_buffer_bytes" 2 652 "int16(int8 stream)" `413 
F N "tx_buffer_full" 2 653 ""
F B "tx_buffer_full" 2 653 "int8()" `415 
F N "tx_buffer_full" 2 654 ""
V L "stream" 2 654 "int8" `417 
F B "tx_buffer_full" 2 654 "int8(int8 stream)" `416 
F N "tx_buffer_bytes" 2 655 ""
F B "tx_buffer_bytes" 2 655 "int16()" `418 
F N "tx_buffer_bytes" 2 656 ""
V L "stream" 2 656 "int8" `420 
F B "tx_buffer_bytes" 2 656 "int16(int8 stream)" `419 
F N "linbus_header" 2 657 ""
V L "identifier" 2 657 "int8" `422 
F B "linbus_header" 2 657 "int8(int8 identifier)" `421 
F N "linbus_header" 2 658 ""
V L "stream" 2 658 "int8" `424 
V L "identifier" 2 658 "int8" `425 
F B "linbus_header" 2 658 "int8(int8 stream,int8 identifier)" `423 
F N "linbus_header_hit" 2 659 ""
F B "linbus_header_hit" 2 659 "int8()" `426 
F N "linbus_header_hit" 2 660 ""
V L "stream" 2 660 "int8" `428 
F B "linbus_header_hit" 2 660 "int8(int8 stream)" `427 
F N "linbus_header_get" 2 661 ""
F B "linbus_header_get" 2 661 "int8()" `429 
F N "linbus_header_get" 2 662 ""
V L "stream" 2 662 "int8" `431 
F B "linbus_header_get" 2 662 "int8(int8 stream)" `430 
F N "linbus_rx_response" 2 663 ""
V L "DataPtr" 2 663 "*int8" `433 
V L "count" 2 663 "int8" `434 
F B "linbus_rx_response" 2 663 "int8(*int8 DataPtr,int8 count)" `432 
F N "linbus_rx_response" 2 664 ""
V L "stream" 2 664 "int8" `436 
V L "DataPtr" 2 664 "*int8" `437 
V L "count" 2 664 "int8" `438 
F B "linbus_rx_response" 2 664 "int8(int8 stream,*int8 DataPtr,int8 count)" `435 
F N "linbus_tx_response" 2 665 ""
V L "DataPtr" 2 665 "*int8" `440 
V L "count" 2 665 "int8" `441 
F B "linbus_tx_response" 2 665 "void(*int8 DataPtr,int8 count)" `439 
F N "linbus_tx_response" 2 666 ""
V L "stream" 2 666 "int8" `443 
V L "DataPtr" 2 666 "*int8" `444 
V L "count" 2 666 "int8" `445 
F B "linbus_tx_response" 2 666 "void(int8 stream,*int8 DataPtr,int8 count)" `442 
F N "linbus_checksum_type" 2 667 ""
V L "type" 2 667 "int8" `447 
F B "linbus_checksum_type" 2 667 "void(int8 type)" `446 
F N "linbus_checksum_type" 2 668 ""
V L "stream" 2 668 "int8" `449 
V L "type" 2 668 "int8" `450 
F B "linbus_checksum_type" 2 668 "void(int8 stream,int8 type)" `448  "#use i2c() Prototypes:"
F N "i2c_read" 2 671 ""
F B "i2c_read" 2 671 "int8()" `451 
F N "i2c_read" 2 672 ""
V L "ack" 2 672 "int8" `453 
F B "i2c_read" 2 672 "int8(int8 ack)" `452 
F N "i2c_read" 2 673 ""
V L "stream" 2 673 "int8" `455 
V L "ack" 2 673 "int8" `456 
F B "i2c_read" 2 673 "int8(int8 stream,int8 ack)" `454 
F N "i2c_write" 2 674 ""
V L "data" 2 674 "int8" `458 
F B "i2c_write" 2 674 "int8(int8 data)" `457 
F N "i2c_write" 2 675 ""
V L "stream" 2 675 "int8" `460 
V L "data" 2 675 "int8" `461 
F B "i2c_write" 2 675 "int8(int8 stream,int8 data)" `459 
F N "i2c_start" 2 676 ""
F B "i2c_start" 2 676 "void()" `462 
F N "i2c_start" 2 677 ""
V L "stream" 2 677 "int8" `464 
F B "i2c_start" 2 677 "void(int8 stream)" `463 
F N "i2c_start" 2 678 ""
V L "stream" 2 678 "int8" `466 
V L "restart" 2 678 "int8" `467 
F B "i2c_start" 2 678 "void(int8 stream,int8 restart)" `465 
F N "i2c_stop" 2 679 ""
F B "i2c_stop" 2 679 "void()" `468 
F N "i2c_stop" 2 680 ""
V L "stream" 2 680 "int8" `470 
F B "i2c_stop" 2 680 "void(int8 stream)" `469 
F N "i2c_isr_state" 2 681 ""
F B "i2c_isr_state" 2 681 "int8()" `471 
F N "i2c_slaveaddr" 2 682 ""
V L "addr" 2 682 "int8" `473 
F B "i2c_slaveaddr" 2 682 "void(int8 addr)" `472 
F N "i2c_slaveaddr" 2 683 ""
V L "stream" 2 683 "int8" `475 
V L "addr" 2 683 "int8" `476 
F B "i2c_slaveaddr" 2 683 "void(int8 stream,int8 addr)" `474 
F N "i2c_poll" 2 684 ""
F B "i2c_poll" 2 684 "int8()" `477 
F N "i2c_poll" 2 685 ""
V L "stream" 2 685 "int8" `479 
F B "i2c_poll" 2 685 "int8(int8 stream)" `478 
F N "i2c_init" 2 686 ""
V L "baud" 2 686 "int32" `481 
F B "i2c_init" 2 686 "void(int32 baud)" `480 
F N "i2c_init" 2 687 ""
V L "stream" 2 687 "int8" `483 
V L "baud" 2 687 "int32" `484 
F B "i2c_init" 2 687 "void(int8 stream,int32 baud)" `482 
F N "i2c_transfer" 2 688 ""
V L "address" 2 688 "int8" `486 
V L "wData" 2 688 "*int8" `487 
V L "wCount" 2 688 "int8" `488 
F B "i2c_transfer" 2 688 "int8(int8 address,*int8 wData,int8 wCount)" `485 
F N "i2c_transfer" 2 689 ""
V L "address" 2 689 "int8" `490 
V L "wData" 2 689 "*int8" `491 
V L "wCount" 2 689 "int8" `492 
V L "rData" 2 689 "*int8" `493 
V L "rCount" 2 689 "*int8" `494 
F B "i2c_transfer" 2 689 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `489 
F N "i2c_transfer" 2 690 ""
V L "stream" 2 690 "int8" `496 
V L "address" 2 690 "int8" `497 
V L "wData" 2 690 "*int8" `498 
V L "wCount" 2 690 "int8" `499 
F B "i2c_transfer" 2 690 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `495 
F N "i2c_transfer" 2 691 ""
V L "stream" 2 691 "int8" `501 
V L "address" 2 691 "int8" `502 
V L "wData" 2 691 "*int8" `503 
V L "wCount" 2 691 "int8" `504 
V L "rData" 2 691 "*int8" `505 
V L "rCount" 2 691 "*int8" `506 
F B "i2c_transfer" 2 691 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `500 
F N "i2c_transfer_out" 2 692 ""
V L "address" 2 692 "int8" `508 
V L "wData" 2 692 "*int8" `509 
V L "wCount" 2 692 "int8" `510 
F B "i2c_transfer_out" 2 692 "int8(int8 address,*int8 wData,int8 wCount)" `507 
F N "i2c_transfer_out" 2 693 ""
V L "stream" 2 693 "int8" `512 
V L "address" 2 693 "int8" `513 
V L "wData" 2 693 "*int8" `514 
V L "wCount" 2 693 "int8" `515 
F B "i2c_transfer_out" 2 693 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `511 
F N "i2c_transfer_in" 2 694 ""
V L "address" 2 694 "int8" `517 
V L "rData" 2 694 "*int8" `518 
V L "rCount" 2 694 "int8" `519 
F B "i2c_transfer_in" 2 694 "int8(int8 address,*int8 rData,int8 rCount)" `516 
F N "i2c_transfer_in" 2 695 ""
V L "stream" 2 695 "int8" `521 
V L "address" 2 695 "int8" `522 
V L "rData" 2 695 "*int8" `523 
V L "rCount" 2 695 "int8" `524 
F B "i2c_transfer_in" 2 695 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `520  "#use spi() Prototypes:"
F N "spi_xfer" 2 698 ""
F B "spi_xfer" 2 698 "int8()" `525 
F N "spi_xfer" 2 699 ""
f G "spi_xfer" 2 699 "int16(int8 data)" `526 
F N "spi_xfer" 2 700 ""
f G "spi_xfer" 2 700 "int32(int8 data)" `526 
F N "spi_xfer" 2 701 ""
V L "data" 2 701 "int8" `527 
F B "spi_xfer" 2 701 "int8(int8 data)" `526 
F N "spi_xfer" 2 702 ""
V L "data" 2 702 "int16" `529 
F B "spi_xfer" 2 702 "int16(int16 data)" `528 
F N "spi_xfer" 2 703 ""
V L "data" 2 703 "int32" `531 
F B "spi_xfer" 2 703 "int32(int32 data)" `530 
F N "spi_xfer" 2 704 ""
V L "stream" 2 704 "int8" `533 
V L "data" 2 704 "int8" `534 
F B "spi_xfer" 2 704 "int8(int8 stream,int8 data)" `532 
F N "spi_xfer" 2 705 ""
V L "stream" 2 705 "int8" `536 
V L "data" 2 705 "int16" `537 
F B "spi_xfer" 2 705 "int16(int8 stream,int16 data)" `535 
F N "spi_xfer" 2 706 ""
V L "stream" 2 706 "int8" `539 
V L "data" 2 706 "int32" `540 
F B "spi_xfer" 2 706 "int32(int8 stream,int32 data)" `538 
F N "spi_xfer" 2 707 ""
V L "stream" 2 707 "int8" `542 
V L "data" 2 707 "int8" `543 
V L "bits" 2 707 "int8" `544 
F B "spi_xfer" 2 707 "int8(int8 stream,int8 data,int8 bits)" `541 
F N "spi_xfer" 2 708 ""
V L "stream" 2 708 "int8" `546 
V L "data" 2 708 "int16" `547 
V L "bits" 2 708 "int8" `548 
F B "spi_xfer" 2 708 "int16(int8 stream,int16 data,int8 bits)" `545 
F N "spi_xfer" 2 709 ""
V L "stream" 2 709 "int8" `550 
V L "data" 2 709 "int32" `551 
V L "bits" 2 709 "int8" `552 
F B "spi_xfer" 2 709 "int32(int8 stream,int32 data,int8 bits)" `549 
F N "spi_init" 2 710 ""
V L "baud" 2 710 "int32" `554 
F B "spi_init" 2 710 "void(int32 baud)" `553 
F N "spi_init" 2 711 ""
V L "stream" 2 711 "int8" `556 
V L "baud" 2 711 "int32" `557 
F B "spi_init" 2 711 "void(int8 stream,int32 baud)" `555 
F N "spi_speed" 2 712 ""
V L "baud" 2 712 "int32" `559 
F B "spi_speed" 2 712 "void(int32 baud)" `558 
F N "spi_speed" 2 713 ""
V L "stream" 2 713 "int8" `561 
V L "baud" 2 713 "int32" `562 
F B "spi_speed" 2 713 "void(int8 stream,int32 baud)" `560 
F N "spi_speed" 2 714 ""
V L "stream" 2 714 "int8" `564 
V L "baud" 2 714 "int32" `565 
V L "clock" 2 714 "int32" `566 
F B "spi_speed" 2 714 "void(int8 stream,int32 baud,int32 clock)" `563 
F N "spi_prewrite" 2 715 ""
V L "data" 2 715 "int8" `568 
F B "spi_prewrite" 2 715 "void(int8 data)" `567 
F N "spi_prewrite" 2 716 ""
V L "data" 2 716 "int16" `570 
F B "spi_prewrite" 2 716 "void(int16 data)" `569 
F N "spi_prewrite" 2 717 ""
V L "data" 2 717 "int32" `572 
F B "spi_prewrite" 2 717 "void(int32 data)" `571 
F N "spi_prewrite" 2 718 ""
V L "??65535" 2 718 "int8" `574 
V L "data" 2 718 "int8" `575 
F B "spi_prewrite" 2 718 "void(int8 ,int8 data)" `573 
F N "spi_prewrite" 2 719 ""
V L "??65535" 2 719 "int8" `577 
V L "data" 2 719 "int16" `578 
F B "spi_prewrite" 2 719 "void(int8 ,int16 data)" `576 
F N "spi_prewrite" 2 720 ""
V L "??65535" 2 720 "int8" `580 
V L "data" 2 720 "int32" `581 
F B "spi_prewrite" 2 720 "void(int8 ,int32 data)" `579 
F N "spi_xfer_in" 2 721 ""
F B "spi_xfer_in" 2 721 "int8()" `582 
F N "spi_xfer_in" 2 722 ""
f G "spi_xfer_in" 2 722 "int16(int8 bits)" `583 
F N "spi_xfer_in" 2 723 ""
f G "spi_xfer_in" 2 723 "int32(int8 bits)" `583 
F N "spi_xfer_in" 2 724 ""
V L "bits" 2 724 "int8" `584 
F B "spi_xfer_in" 2 724 "int8(int8 bits)" `583 
F N "spi_xfer_in" 2 725 ""
V L "bits" 2 725 "int8" `586 
f G "spi_xfer_in" 2 725 "int16(int8 bits,int8 bits)" `585 
F N "spi_xfer_in" 2 726 ""
V L "bits" 2 726 "int8" `586 
f G "spi_xfer_in" 2 726 "int32(int8 bits,int8 bits)" `585 
F N "spi_xfer_in" 2 727 ""
V L "stream" 2 727 "int8" `586 
V L "bits" 2 727 "int8" `587 
F B "spi_xfer_in" 2 727 "int8(int8 stream,int8 bits)" `585 
F N "spi_xfer_in" 2 728 ""
V L "stream" 2 728 "int8" `586 
V L "bits" 2 728 "int8" `590 
f G "spi_xfer_in" 2 728 "int16(int8 stream,int8 bits,int16 count)" `588 
F N "spi_xfer_in" 2 729 ""
V L "stream" 2 729 "int8" `586 
V L "bits" 2 729 "int8" `590 
f G "spi_xfer_in" 2 729 "int32(int8 stream,int8 bits,int16 count)" `588 
F N "spi_transfer" 2 730 ""
V L "wData" 2 730 "*int8" `589 
V L "rData" 2 730 "*int8" `590 
V L "count" 2 730 "int16" `591 
F B "spi_transfer" 2 730 "void(*int8 wData,*int8 rData,int16 count)" `588 
F N "spi_transfer" 2 731 ""
V L "stream" 2 731 "int8" `593 
V L "wData" 2 731 "*int8" `594 
V L "rData" 2 731 "*int8" `595 
V L "count" 2 731 "int16" `596 
F B "spi_transfer" 2 731 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `592 
F N "spi_transfer_write" 2 732 ""
V L "wData" 2 732 "*int8" `598 
V L "count" 2 732 "int16" `599 
F B "spi_transfer_write" 2 732 "void(*int8 wData,int16 count)" `597 
F N "spi_transfer_write" 2 733 ""
V L "stream" 2 733 "int8" `601 
V L "wData" 2 733 "*int8" `602 
V L "count" 2 733 "int16" `603 
F B "spi_transfer_write" 2 733 "void(int8 stream,*int8 wData,int16 count)" `600 
F N "spi_transfer_read" 2 734 ""
V L "rData" 2 734 "*int8" `605 
V L "count" 2 734 "int16" `606 
F B "spi_transfer_read" 2 734 "void(*int8 rData,int16 count)" `604 
F N "spi_transfer_read" 2 735 ""
V L "stream" 2 735 "int8" `608 
V L "rData" 2 735 "*int8" `609 
V L "count" 2 735 "int16" `610 
F B "spi_transfer_read" 2 735 "void(int8 stream,*int8 rData,int16 count)" `607  "#use rtos() Prototypes:"
F N "rtos_run" 2 738 ""
F B "rtos_run" 2 738 "void()" `611 
F N "rtos_yield" 2 739 ""
F B "rtos_yield" 2 739 "void()" `612 
F N "rtos_enable" 2 740 ""
V L "task" 2 740 "int8" `614 
F B "rtos_enable" 2 740 "void(int8 task)" `613 
F N "rtos_disable" 2 741 ""
V L "task" 2 741 "int8" `616 
F B "rtos_disable" 2 741 "void(int8 task)" `615 
F N "rtos_terminate" 2 742 ""
F B "rtos_terminate" 2 742 "void()" `617 
F N "rtos_await" 2 743 ""
V L "flag" 2 743 "int8" `619 
F B "rtos_await" 2 743 "void(int8 flag)" `618 
F N "rtos_wait" 2 744 ""
V L "sem" 2 744 "int8" `621 
F B "rtos_wait" 2 744 "void(int8 sem)" `620 
F N "rtos_signal" 2 745 ""
V L "sem" 2 745 "int8" `623 
F B "rtos_signal" 2 745 "void(int8 sem)" `622 
F N "rtos_msg_send" 2 746 ""
V L "task" 2 746 "int8" `625 
V L "msg" 2 746 "int8" `626 
F B "rtos_msg_send" 2 746 "void(int8 task,int8 msg)" `624 
F N "rtos_msg_read" 2 747 ""
F B "rtos_msg_read" 2 747 "int8()" `627 
F N "rtos_msg_poll" 2 748 ""
F B "rtos_msg_poll" 2 748 "int8()" `628 
F N "rtos_overrun" 2 749 ""
V L "task" 2 749 "int8" `630 
F B "rtos_overrun" 2 749 "int8(int8 task)" `629 
F N "rtos_stats" 2 750 ""
V L "task" 2 750 "int8" `632 
V L "stat" 2 750 "*int8" `633 
F B "rtos_stats" 2 750 "void(int8 task,*int8 stat)" `631  "#use timer() Prototypes:"
F N "get_ticks" 2 753 ""
F B "get_ticks" 2 753 "int8()" `634 
F N "get_ticks" 2 754 ""
f G "get_ticks" 2 754 "int16(int8 stream)" `635 
F N "get_ticks" 2 755 ""
f G "get_ticks" 2 755 "int32(int8 stream)" `635 
F N "get_ticks" 2 756 ""
V L "stream" 2 756 "int8" `636 
F B "get_ticks" 2 756 "int8(int8 stream)" `635 
F N "get_ticks" 2 757 ""
V L "stream" 2 757 "int8" `638 
f G "get_ticks" 2 757 "int16(int8 stream)" `637 
F N "get_ticks" 2 758 ""
V L "stream" 2 758 "int8" `638 
f G "get_ticks" 2 758 "int32(int8 stream)" `637 
F N "set_ticks" 2 759 ""
V L "value" 2 759 "int8" `638 
F B "set_ticks" 2 759 "void(int8 value)" `637 
F N "set_ticks" 2 760 ""
V L "value" 2 760 "int16" `640 
F B "set_ticks" 2 760 "void(int16 value)" `639 
F N "set_ticks" 2 761 ""
V L "value" 2 761 "int32" `642 
F B "set_ticks" 2 761 "void(int32 value)" `641 
F N "set_ticks" 2 762 ""
V L "stream" 2 762 "int8" `644 
V L "value" 2 762 "int8" `645 
F B "set_ticks" 2 762 "void(int8 stream,int8 value)" `643 
F N "set_ticks" 2 763 ""
V L "stream" 2 763 "int8" `647 
V L "value" 2 763 "int16" `648 
F B "set_ticks" 2 763 "void(int8 stream,int16 value)" `646 
F N "set_ticks" 2 764 ""
V L "stream" 2 764 "int8" `650 
V L "value" 2 764 "int32" `651 
F B "set_ticks" 2 764 "void(int8 stream,int32 value)" `649  "#use pwm() Prototypes:"
F N "pwm_on" 2 767 ""
F B "pwm_on" 2 767 "void()" `652 
F N "pwm_on" 2 768 ""
V L "stream" 2 768 "int8" `654 
F B "pwm_on" 2 768 "void(int8 stream)" `653 
F N "pwm_off" 2 769 ""
F B "pwm_off" 2 769 "void()" `655 
F N "pwm_off" 2 770 ""
V L "stream" 2 770 "int8" `657 
F B "pwm_off" 2 770 "void(int8 stream)" `656 
F N "pwm_set_duty" 2 771 ""
V L "duty" 2 771 "int16" `659 
F B "pwm_set_duty" 2 771 "void(int16 duty)" `658 
F N "pwm_set_duty" 2 772 ""
V L "stream" 2 772 "int8" `661 
V L "duty" 2 772 "int16" `662 
F B "pwm_set_duty" 2 772 "void(int8 stream,int16 duty)" `660 
F N "pwm_set_duty_percent" 2 773 ""
V L "percent" 2 773 "int16" `664 
F B "pwm_set_duty_percent" 2 773 "void(int16 percent)" `663 
F N "pwm_set_duty_percent" 2 774 ""
V L "stream" 2 774 "int8" `666 
V L "percent" 2 774 "int16" `667 
F B "pwm_set_duty_percent" 2 774 "void(int8 stream,int16 percent)" `665 
F N "pwm_set_frequency" 2 775 ""
V L "frequency" 2 775 "int32" `669 
F B "pwm_set_frequency" 2 775 "void(int32 frequency)" `668 
F N "pwm_set_frequency" 2 776 ""
V L "stream" 2 776 "int8" `671 
V L "frequency" 2 776 "int32" `672 
F B "pwm_set_frequency" 2 776 "void(int8 stream,int32 frequency)" `670 
F N "pwm_get_duty_period" 2 777 ""
F B "pwm_get_duty_period" 2 777 "int16()" `673 
F N "pwm_get_duty_period" 2 778 ""
V L "stream" 2 778 "int8" `675 
F B "pwm_get_duty_period" 2 778 "int16(int8 stream)" `674  "#use capture() Prototypes:"
F N "get_capture_time" 2 781 ""
F B "get_capture_time" 2 781 "int16()" `676 
F N "get_capture_time" 2 782 ""
V L "stream" 2 782 "int8" `678 
F B "get_capture_time" 2 782 "int16(int8 stream)" `677 
F N "get_capture_event" 2 783 ""
F B "get_capture_event" 2 783 "int8()" `679 
F N "get_capture_event" 2 784 ""
V L "stream" 2 784 "int8" `681 
F B "get_capture_event" 2 784 "int8(int8 stream)" `680  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
F N "goto_address" 2 797 ""
V L "address" 2 797 "int32" `683 
F B "goto_address" 2 797 "void(int32 address)" `682 
F N "label_address" 2 798 ""
V L "label" 2 798 "int32" `685 
F B "label_address" 2 798 "int32(int32 label)" `684  "Program Memory Read Prototypes:"
F N "read_program_memory" 2 801 ""
V L "address" 2 801 "int32" `687 
V L "DataPtr" 2 801 "*int8" `688 
V L "count" 2 801 "int16" `689 
F B "read_program_memory" 2 801 "void(int32 address,*int8 DataPtr,int16 count)" `686 
F N "read_program_eeprom" 2 802 ""
V L "address" 2 802 "int32" `691 
F B "read_program_eeprom" 2 802 "int16(int32 address)" `690  "Program Memory Write Prototypes:"
F N "erase_program_eeprom" 2 805 ""
V L "address" 2 805 "int32" `693 
F B "erase_program_eeprom" 2 805 "void(int32 address)" `692 
F N "write_program_memory" 2 806 ""
V L "address" 2 806 "int32" `695 
V L "DataPtr" 2 806 "*int8" `696 
V L "count" 2 806 "int16" `697 
F B "write_program_memory" 2 806 "void(int32 address,*int8 DataPtr,int16 count)" `694 
F N "write_program_eeprom" 2 807 ""
V L "address" 2 807 "int32" `699 
V L "data" 2 807 "int16" `700 
F B "write_program_eeprom" 2 807 "void(int32 address,int16 data)" `698  "EEPROM Prototypes:"
D G "__EEADDRESS__" 2 812 "unsigned int16"
F N "read_eeprom" 2 817 ""
V L "address" 2 817 "int16" `702 
F B "read_eeprom" 2 817 "int8(int16 address)" `701 
F N "write_eeprom" 2 818 ""
V L "address" 2 818 "int16" `704 
V L "value" 2 818 "int8" `705 
F B "write_eeprom" 2 818 "void(int16 address,int8 value)" `703  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
F N "enable_interrupts" 2 825 ""
V L "interrupt" 2 825 "int32" `707 
F B "enable_interrupts" 2 825 "void(int32 interrupt)" `706 
F N "disable_interrupts" 2 826 ""
V L "interrupt" 2 826 "int32" `709 
F B "disable_interrupts" 2 826 "void(int32 interrupt)" `708 
F N "clear_interrupt" 2 827 ""
V L "interrupt" 2 827 "int32" `711 
F B "clear_interrupt" 2 827 "void(int32 interrupt)" `710 
F N "interrupt_active" 2 828 ""
V L "interrupt" 2 828 "int32" `713 
F B "interrupt_active" 2 828 "int8(int32 interrupt)" `712 
F N "interrupt_enabled" 2 829 ""
V L "interrupt" 2 829 "int32" `715 
F B "interrupt_enabled" 2 829 "int8(int32 interrupt)" `714 
F N "ext_int_edge" 2 830 ""
V L "source" 2 830 "int8" `717 
V L "edge" 2 830 "int8" `718 
F B "ext_int_edge" 2 830 "void(int8 source,int8 edge)" `716 
F N "jump_to_isr" 2 831 ""
V L "address" 2 831 "int16" `720 
F B "jump_to_isr" 2 831 "void(int16 address)" `719  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 2 833 "0x40"
D G "H_TO_L" 2 834 "0"
D G "GLOBAL" 2 836 "0xF2C0"
D G "PERIPH" 2 837 "0xF240"
D G "INT_RTCC" 2 838 "0x00F220"
D G "INT_TIMER0" 2 839 "0x00F220"
D G "INT_TIMER1" 2 840 "0x009D01"
D G "INT_TIMER2" 2 841 "0x009D02"
D G "INT_TIMER3" 2 842 "0x00A002"
D G "INT_EXT_L2H" 2 843 "0x5000F210"
D G "INT_EXT_H2L" 2 844 "0x6000F210"
D G "INT_EXT" 2 845 "0x00F210"
D G "INT_EXT1_L2H" 2 846 "0x5001F008"
D G "INT_EXT1_H2L" 2 847 "0x6001F008"
D G "INT_EXT1" 2 848 "0x00F008"
D G "INT_EXT2_L2H" 2 849 "0x5002F010"
D G "INT_EXT2_H2L" 2 850 "0x6002F010"
D G "INT_EXT2" 2 851 "0x00F010"
D G "INT_RB" 2 852 "0x01FFF208"
D G "INT_AD" 2 853 "0x009D40"
D G "INT_RDA" 2 854 "0x009D20"
D G "INT_TBE" 2 855 "0x009D10"
D G "INT_SSP" 2 856 "0x009D08"
D G "INT_CCP1" 2 857 "0x009D04"
D G "INT_CCP2" 2 858 "0x00A001"
D G "INT_BUSCOL" 2 859 "0x00A008"
D G "INT_LOWVOLT" 2 860 "0x00A004"
D G "INT_COMP" 2 861 "0x00A040"
D G "INT_EEPROM" 2 862 "0x00A010"
D G "INT_OSCF" 2 863 "0x00A080"
D G "INT_COMP2" 2 864 "0x00A020"
D G "INT_RB0" 2 865 "0x101F208"
D G "INT_RB1" 2 866 "0x102F208"
D G "INT_RB2" 2 867 "0x104F208"
D G "INT_RB3" 2 868 "0x108F208"
D G "INT_RB4" 2 869 "0x110F208"
D G "INT_RB5" 2 870 "0x120F208"
D G "INT_RB6" 2 871 "0x140F208"
D G "INT_RB7" 2 872 "0x180F208"
D G "_STDLIB" 3 13 ""
D G "RAND_MAX" 3 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 3 26 "1"
T G "div_t" 3 34 "{sint8 quot,sint8 rem}" `728 
T G "ldiv_t" 3 39 "{sint16 quot,sint16 rem}" `732  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "unsigned char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 3 44 2 "FUNCTION"
C L "jump_to_isr" 3 47 1 "*"
C L "jump_to_isr" 3 47 1 "*"
F N "atoi" 3 51 ""
V L "s" 3 51 "*int8" `734 
f G "atoi" 3 51 "sint8(*int8 s)" `733  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 3 59 ""
V L "s" 3 59 "*int8" `736 
f G "atoi32" 3 59 "sint32(*int8 s)" `735  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 3 47 2 "FUNCTION"
F N "itoa" 3 80 ""
V L "num" 3 80 "sint32" `738 
V L "base" 3 80 "int8" `739 
V L "s" 3 80 "*int8" `740 
f G "itoa" 3 80 "*int8(sint32 num,int8 base,*int8 s)" `737  "Standard template: signed int16  atol(char * s)"
C L "itoa" 3 82 1 "*"
C L "itoa" 3 82 1 "*"
F N "atol" 3 86 ""
V L "s" 3 86 "*int8" `742 
f G "atol" 3 86 "sint16(*int8 s)" `741  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
C L "atol" 3 88 1 "*"
F N "strtol" 3 94 ""
V L "s" 3 94 "*int8" `744 
V L "endptr" 3 94 "*int8" `745 
V L "base" 3 94 "sint8" `746 
f G "strtol" 3 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `743  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
C L "strtol" 3 96 1 "*"
F N "strtoul" 3 102 ""
V L "s" 3 102 "*int8" `748 
V L "endptr" 3 102 "*int8" `749 
V L "base" 3 102 "sint8" `750 
f G "strtoul" 3 102 "int16(*int8 s,*int8 endptr,sint8 base)" `747  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 3 96 2 "FUNCTION"
C L "strtoul" 3 104 1 "*"
C L "strtoul" 3 104 1 "*"
C L "strtoul" 3 104 1 "*"
F N "strtof" 3 111 ""
V L "s" 3 111 "*int8" `752 
V L "endptr" 3 111 "??0 *" `753 
f G "strtof" 3 111 "float(*int8 s,??0 * endptr)" `751  "provided for compatibility"
D G "strtof48" 3 117 "(s,e) strtof(s, e)"
D G "strtod" 3 118 "(s,e) strtof(s, e)"
C L "strtof" 3 104 1 "FUNCTION"
C L "strtof" 3 121 1 "*"
D G "atof" 3 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 3 121 1 "FUNCTION"
C L "strtof" 3 144 1 "*"
C L "strtof" 3 144 1 "*"
C L "strtof" 3 144 1 "*"
F N "atoe" 3 150 ""
V L "s" 3 150 "*int8" `756 
f G "atoe" 3 150 "float(*int8 s)" `755  "Pseudo-random sequence generation functions"
C L "atoe" 3 144 1 "FUNCTION"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
C L "atoe" 3 161 1 "*"
F N "rand" 3 170 ""
f G "rand" 3 170 "int16()" `757  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
C L "rand" 3 172 1 "*"
F N "srand" 3 192 ""
V L "seed" 3 192 "int32" `759 
f G "srand" 3 192 "void(int32 seed)" `758  "Memory management functions"
C L "srand" 3 172 3 "FUNCTION"
F N "system" 3 206 ""
V L "string" 3 206 "*int8" `761 
f G "system" 3 206 "sint8(*int8 string)" `760  "Searching and sorting utilities"
C L "system" 3 172 1 "FUNCTION"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 1 "*"
C L "system" 3 212 4 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
C L "system" 3 230 1 "*"
D G "labs" 3 250 "abs"
F N "div" 3 252 ""
V L "numer" 3 252 "sint8" `763 
V L "denom" 3 252 "sint8" `764 
f G "div" 3 252 "div_t(sint8 numer,sint8 denom)" `762 
F N "ldiv" 3 253 ""
V L "numer" 3 253 "sint16" `766 
V L "denom" 3 253 "sint16" `767 
f G "ldiv" 3 253 "ldiv_t(sint16 numer,sint16 denom)" `765  "Multibyte character functions"
C L "ldiv" 3 230 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
D G "_STRING" 5 12 ""
C L "ldiv" 4 2 7 "FUNCTION"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 5 19 10 "FUNCTION"
F N "memmove" 5 34 ""
V L "s1" 5 34 "*void" `769 
V L "s2" 5 34 "*void" `770 
V L "n" 5 34 "int16" `771 
F G "memmove" 5 35 "*int8(*void s1,*void s2,int16 n)" `768 
V L "sc1" 5 36 "*int8" `772 
V L "sc2" 5 37 "*int8" `773 
D G "strcopy" 5 54 "strcpy"
C L "strncpy" 5 19 4 "FUNCTION"
F N "strncpy" 5 61 ""
V L "s1" 5 61 "*int8" `775 
V L "s2" 5 61 "*int8" `776 
V L "n" 5 61 "int16" `777 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int16 n)" `774 
V L "s" 5 63 "*int8" `778 
C L "strcat" 5 19 3 "FUNCTION"
F N "strcat" 5 78 ""
V L "s1" 5 78 "*int8" `780 
V L "s2" 5 78 "*int8" `781 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `779 
V L "s" 5 80 "*int8" `782 
C L "strncat" 5 19 2 "FUNCTION"
F N "strncat" 5 96 ""
V L "s1" 5 96 "*int8" `784 
V L "s2" 5 96 "*int8" `785 
V L "n" 5 96 "int16" `786 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int16 n)" `783 
V L "s" 5 98 "*int8" `787 
C L "memcmp" 5 19 3 "FUNCTION"
F N "memcmp" 5 120 ""
V L "s1" 5 120 "*void" `789 
V L "s2" 5 120 "*void" `790 
V L "n" 5 120 "int16" `791 
F G "memcmp" 5 121 "sint8(*void s1,*void s2,int16 n)" `788 
V L "su1" 5 122 "*int8" `792 
V L "su2" 5 122 "*int8" `793 
C L "strcmp" 5 19 2 "FUNCTION"
F N "strcmp" 5 134 ""
V L "s1" 5 134 "*int8" `795 
V L "s2" 5 134 "*int8" `796 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `794 
C L "strcoll" 5 19 2 "FUNCTION"
F N "strcoll" 5 144 ""
V L "s1" 5 144 "*int8" `798 
V L "s2" 5 144 "*int8" `799 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `797 
C L "strncmp" 5 19 4 "FUNCTION"
F N "strncmp" 5 157 ""
V L "s1" 5 157 "*int8" `801 
V L "s2" 5 157 "*int8" `802 
V L "n" 5 157 "int16" `803 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int16 n)" `800 
C L "strxfrm" 5 19 4 "FUNCTION"
F N "strxfrm" 5 170 ""
V L "s1" 5 170 "*int8" `805 
V L "s2" 5 170 "*int8" `806 
V L "n" 5 170 "int16" `807 
F G "strxfrm" 5 171 "int16(*int8 s1,*int8 s2,int16 n)" `804 
V L "c" 5 172 "int8" `808 
V L "n1" 5 173 "int16" `809 
C L "strxfrm" 5 19 1 "FUNCTION"
C L "memchr" 5 19 3 "FUNCTION"
F N "memchr" 5 201 ""
V L "s" 5 201 "*void" `811 
V L "c" 5 201 "int8" `812 
V L "n" 5 201 "int16" `813 
F G "memchr" 5 202 "*int8(*void s,int8 c,int16 n)" `810 
V L "uc" 5 203 "int8" `814 
V L "su" 5 204 "*int8" `815 
C L "strchr" 5 19 2 "FUNCTION"
F N "strchr" 5 215 ""
V L "s" 5 215 "*int8" `817 
V L "c" 5 215 "int8" `818 
F G "strchr" 5 216 "*int8(*int8 s,int8 c)" `816 
C L "strcspn" 5 19 4 "FUNCTION"
F N "strcspn" 5 227 ""
V L "s1" 5 227 "*int8" `820 
V L "s2" 5 227 "*int8" `821 
F G "strcspn" 5 228 "int16(*int8 s1,*int8 s2)" `819 
V L "sc1" 5 229 "*int8" `822 
V L "sc2" 5 229 "*int8" `823 
C L "strpbrk" 5 19 4 "FUNCTION"
F N "strpbrk" 5 242 ""
V L "s1" 5 242 "*int8" `825 
V L "s2" 5 242 "*int8" `826 
F G "strpbrk" 5 243 "*int8(*int8 s1,*int8 s2)" `824 
V L "sc1" 5 244 "*int8" `827 
V L "sc2" 5 244 "*int8" `828 
C L "strrchr" 5 19 2 "FUNCTION"
F N "strrchr" 5 257 ""
V L "s" 5 257 "*int8" `830 
V L "c" 5 257 "int8" `831 
F G "strrchr" 5 258 "*int8(*int8 s,int8 c)" `829 
V L "p" 5 259 "*int8" `832 
C L "strspn" 5 19 2 "FUNCTION"
F N "strspn" 5 272 ""
V L "s1" 5 272 "*int8" `834 
V L "s2" 5 272 "*int8" `835 
F G "strspn" 5 273 "int16(*int8 s1,*int8 s2)" `833 
V L "sc1" 5 274 "*int8" `836 
V L "sc2" 5 274 "*int8" `837 
C L "strstr" 5 19 6 "FUNCTION"
F N "strstr" 5 291 ""
V L "s1" 5 291 "*int8" `839 
V L "s2" 5 291 "*int8" `840 
F G "strstr" 5 292 "*int8(*int8 s1,*int8 s2)" `838 
V L "s" 5 293 "*int8" `841 
V L "t" 5 293 "*int8" `842 
C L "strlen" 5 19 2 "FUNCTION"
F N "strlen" 5 318 ""
V L "s" 5 318 "*int8" `844 
F G "strlen" 5 319 "int16(*int8 s)" `843 
V L "sc" 5 320 "*int8" `845 
C L "strtok" 5 19 13 "FUNCTION"
F N "strtok" 5 341 ""
V L "s1" 5 341 "*int8" `847 
V L "s2" 5 341 "*int8" `848 
F G "strtok" 5 342 "*int8(*int8 s1,*int8 s2)" `846 
V L "beg" 5 343 "*int8" `849 
V L "end" 5 343 "*int8" `850 
V L "save" 5 344 "*int8" `851 
C L "stricmp" 5 19 6 "FUNCTION"
F N "stricmp" 5 392 ""
V L "s1" 5 392 "*int8" `853 
V L "s2" 5 392 "*int8" `854 
F G "stricmp" 5 393 "sint8(*int8 s1,*int8 s2)" `852 
C L "strlwr" 5 19 3 "FUNCTION"
F N "strlwr" 5 406 ""
V L "s" 5 406 "*int8" `858 
F G "strlwr" 5 407 "*int8(*int8 s)" `857 
V L "p" 5 408 "*int8" `859 
C L "strupr" 5 19 3 "FUNCTION"
F N "strupr" 5 420 ""
V L "s" 5 420 "*int8" `861 
F G "strupr" 5 421 "*int8(*int8 s)" `860 
V L "p" 5 422 "*int8" `862 
F N "div" 3 275 ""
V L "numer" 3 275 "sint8" `763 
V L "denom" 3 275 "sint8" `865 
F G "div" 3 276 "div_t(sint8 numer,sint8 denom)" `762 
V L "val" 3 277 "div_t" `863 
F N "ldiv" 3 283 ""
V L "numer" 3 283 "sint16" `766 
V L "denom" 3 283 "sint16" `872 
F G "ldiv" 3 284 "ldiv_t(sint16 numer,sint16 denom)" `765 
V L "val" 3 285 "ldiv_t" `870 
F N "atoe" 3 362 ""
V L "s" 3 362 "*int8" `878 
F G "atoe" 3 363 "float(*int8 s)" `755 
V L "pow10" 3 364 "float" `877 
V L "result" 3 365 "float" `878 
V L "sign" 3 366 "int8" `879 
V L "expsign" 3 367 "int8" `880 
V L "c" 3 368 "int8" `881 
V L "ptr" 3 369 "int8" `882 
V L "i" 3 370 "int8" `883 
V L "exp" 3 371 "float" `884 
V L "expcnt" 3 372 "int8" `885 
C L "atoe" 3 398 1 "FUNCTION"
F N "atoi" 3 430 ""
V L "s" 3 430 "*int8" `898 
F G "atoi" 3 431 "sint8(*int8 s)" `733 
V L "result" 3 432 "sint8" `897 
V L "sign" 3 433 "int8" `898 
V L "base" 3 433 "int8" `899 
V L "index" 3 433 "int8" `900 
V L "c" 3 434 "int8" `901 
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
C L "atoi" 3 398 1 "FUNCTION"
F N "atol" 3 499 ""
V L "s" 3 499 "*int8" `903 
F G "atol" 3 500 "sint16(*int8 s)" `741 
V L "result" 3 501 "sint16" `902 
V L "sign" 3 502 "int8" `903 
V L "base" 3 502 "int8" `904 
V L "index" 3 502 "int8" `905 
V L "c" 3 503 "int8" `906 
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "atol" 3 398 1 "FUNCTION"
C L "mult_with10" 3 398 1 "FUNCTION"
F N "mult_with10" 3 566 ""
V L "num" 3 566 "int32" `908 
F G "mult_with10" 3 567 "sint32(int32 num)" `907 
F N "atoi32" 3 572 ""
V L "s" 3 572 "*int8" `910 
F G "atoi32" 3 573 "sint32(*int8 s)" `735 
V L "result" 3 574 "sint32" `909 
V L "sign" 3 575 "int8" `910 
V L "base" 3 575 "int8" `911 
V L "index" 3 575 "int8" `912 
V L "c" 3 576 "int8" `913 
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
C L "atoi32" 3 398 1 "FUNCTION"
F N "itoa" 3 771 ""
V L "num" 3 771 "sint32" `738 
V L "base" 3 771 "int8" `739 
V L "s" 3 771 "*int8" `917 
F G "itoa" 3 772 "*int8(sint32 num,int8 base,*int8 s)" `737 
V L "temp" 3 773 "int32" `914 
V L "i" 3 774 "int8" `915 
V L "sign" 3 774 "int8" `916 
V L "cnt" 3 774 "int8" `917 
V L "c" 3 775 "int8" `918 
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
C L "itoa" 3 398 1 "FUNCTION"
F N "strtof" 3 886 ""
V L "s" 3 886 "*int8" `752 
V L "endptr" 3 886 "??0 *" `927 
F G "strtof" 3 887 "float(*int8 s,??0 * endptr)" `751 
V L "pow10" 3 888 "float" `925 
V L "result" 3 889 "float" `926 
V L "skip" 3 890 "int1" `927 
V L "sign" 3 890 "int1" `928 
V L "point" 3 890 "int1" `929 
V L "c" 3 891 "int8" `930 
V L "ptr" 3 892 "int8" `931 
F N "strtoul" 3 1105 ""
V L "s" 3 1105 "*int8" `748 
V L "endptr" 3 1105 "*int8" `749 
V L "base" 3 1105 "sint8" `936 
F G "strtoul" 3 1106 "int16(*int8 s,*int8 endptr,sint8 base)" `747 
V L "sc" 3 1107 "*int8" `933 
V L "s1" 3 1107 "*int8" `934 
V L "sd" 3 1107 "*int8" `935 
V L "x" 3 1108 "int16" `936 
V L "sign" 3 1109 "int8" `937 
V L "digits" 3 1110 "int8[1]" `938 
C L "strtoul" 3 398 1 "FUNCTION"
C L "strtoul" 3 398 1 "FUNCTION"
C L "strtoul" 3 398 1 "FUNCTION"
F N "strtol" 3 1167 ""
V L "s" 3 1167 "*int8" `744 
V L "endptr" 3 1167 "*int8" `745 
V L "base" 3 1167 "sint8" `943 
F G "strtol" 3 1168 "sint16(*int8 s,*int8 endptr,sint8 base)" `743 
V L "sc" 3 1169 "*int8" `940 
V L "s1" 3 1169 "*int8" `941 
V L "sd" 3 1169 "*int8" `942 
V L "x" 3 1170 "sint16" `943 
V L "sign" 3 1171 "int8" `944 
V L "digits" 3 1172 "int8[1]" `945 
C L "strtol" 3 398 1 "FUNCTION"
C L "strtol" 3 398 1 "FUNCTION"
C L "strtol" 3 398 1 "FUNCTION"
F N "system" 3 1231 ""
V L "string" 3 1231 "*int8" `948 
F G "system" 3 1232 "sint8(*int8 string)" `760 
F N "mblen" 3 1236 ""
V L "s" 3 1236 "*int8" `948 
V L "n" 3 1236 "int16" `949 
F G "mblen" 3 1237 "int16(*int8 s,int16 n)" `947 
F N "mbtowc" 3 1241 ""
V L "pwc" 3 1241 "*int8" `951 
V L "s" 3 1241 "*int8" `952 
V L "n" 3 1241 "int16" `953 
F G "mbtowc" 3 1242 "int8(*int8 pwc,*int8 s,int16 n)" `950 
F N "wctomb" 3 1247 ""
V L "s" 3 1247 "*int8" `955 
V L "wchar" 3 1247 "int8" `956 
F G "wctomb" 3 1248 "int8(*int8 s,int8 wchar)" `954 
F N "mbstowcs" 3 1253 ""
V L "pwcs" 3 1253 "*int8" `958 
V L "s" 3 1253 "*int8" `959 
V L "n" 3 1253 "int16" `960 
F G "mbstowcs" 3 1254 "int16(*int8 pwcs,*int8 s,int16 n)" `957 
F N "wcstombs" 3 1259 ""
V L "s" 3 1259 "*int8" `962 
V L "pwcs" 3 1259 "*int8" `963 
V L "n" 3 1259 "int16" `964 
F G "wcstombs" 3 1260 "int16(*int8 s,*int8 pwcs,int16 n)" `961 
V G "_Randseed" 3 1269 "int32" `965 
F N "rand" 3 1271 ""
F G "rand" 3 1272 "int16()" `757 
F N "srand" 3 1277 ""
V L "seed" 3 1277 "int32" `970 
F G "srand" 3 1278 "void(int32 seed)" `758 
F N "*_Cmpfun" 3 1287 ""
V L "p1" 3 1287 "*int8" `970 
V L "p2" 3 1287 "*int8" `971 
T G "*_Cmpfun" 3 1287 "sint8(*int8 p1,*int8 p2)" `969 
F N "qsort" 3 1294 ""
V L "qdata" 3 1294 "*int8" `974 
V L "qitems" 3 1294 "int8" `975 
V L "qsize" 3 1294 "int8" `976 
V L "cmp" 3 1294 "_Cmpfun" `977 
F G "qsort" 3 1294 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `973 
V L "m" 3 1295 "int8" `978 
V L "j" 3 1295 "int8" `979 
V L "i" 3 1295 "int8" `980 
V L "l" 3 1295 "int8" `981 
V L "done" 3 1296 "int1" `982 
V L "t" 3 1297 "int8[16]" `983 
F N "bsearch" 3 1322 ""
V L "key" 3 1322 "*int8" `986 
V L "base" 3 1322 "*int8" `987 
V L "num" 3 1322 "int16" `988 
V L "width" 3 1322 "int16" `989 
V L "cmp" 3 1322 "_Cmpfun" `990 
F G "bsearch" 3 1323 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `985 
V L "p" 3 1324 "*int8" `991 
V L "q" 3 1324 "*int8" `992 
V L "n" 3 1325 "int16" `993 
V L "pivot" 3 1326 "int16" `994 
V L "val" 3 1327 "sint8" `995 
C L "bsearch" 3 398 1 "FUNCTION"
D G "sw_mode" 1 8 "PIN_A3"
D G "sw_up" 1 9 "PIN_A2"
D G "sw_down" 1 10 "PIN_A1"
D G "sw_exit" 1 11 "PIN_A0"
D G "val_mode" 1 13 "() !input(sw_mode)"
D G "val_up" 1 14 "() !input(sw_up)"
D G "val_down" 1 15 "() !input(sw_down)"
D G "val_exit" 1 16 "() !input(sw_exit)"
D G "clock_reset" 1 18 "PIN_A3" "TAO XUNG CHONG TREO"
D G "backlight_lcd" 1 20 "PIN_A4"
D G "backlight_on" 1 21 "() output_high(backlight_lcd);"
D G "backlight_off" 1 22 "() output_low(backlight_lcd);"
D G "cb_mn" 1 24 "PIN_C2"
D G "cb_ac" 1 25 "PIN_C3"
D G "status_mn" 1 27 "() !input(cb_mn)"
D G "status_ac" 1 28 "() !input(cb_ac)"
D G "out_fire" 1 30 "PIN_B2"
D G "out_temp" 1 31 "PIN_B3"
D G "out_error" 1 32 "PIN_B5"
D G "out_delay" 1 33 "PIN_B4"
D G "out_mn" 1 34 "PIN_B6"
D G "out_ac" 1 35 "PIN_B7"
D G "ree" 1 37 "(x) read_eeprom(x);"
D G "wee" 1 38 "(x,y) write_eeprom(x, y);"
D G "ree16" 1 39 "(x) read_eeprom16(x);"
D G "wee16" 1 40 "(x,y) write_eeprom16(x, y);"
D G "phong_accu" 1 42 "1"
D G "tg_chay_lien_tuc" 1 43 "2"
D G "tg_tam_dung" 1 44 "3"
D G "do_ac" 1 45 "4"
D G "ac_bthg" 1 46 "5"
D G "chay_mpd" 1 47 "6"
D G "error" 1 48 "7"
D G "sec_to_sec" 1 50 "(time) time % 60"
D G "sec_to_minute" 1 51 "(time) time / 60"
D G "clear_lcd" 1 53 "() lcd_printf(0);"
D G "yesno" 1 54 "() lcd_printf(9);"
D G "loading" 1 55 "() lcd_printf(10);"
D G "sch_1_s_set" 1 57 "() lcd_printf(11);"
D G "size_pass" 1 59 "5"
D G "LCD_RS" 7 4 "PIN_B1"
D G "LCD_EN" 7 5 "PIN_B0"
D G "LCD_D4" 7 6 "PIN_C7"
D G "LCD_D5" 7 7 "PIN_C6"
D G "LCD_D6" 7 8 "PIN_C5"
D G "LCD_D7" 7 9 "PIN_C4"
D G "Line_1" 7 10 "0x80"
D G "Line_2" 7 11 "0xC0"
D G "Clear_Scr" 7 12 "0x01"
F N "LCD_Init" 7 14 ""
f G "LCD_Init" 7 14 "void()" `999  "ham khoi tao LCD"
F N "LCD_SetPosition" 7 15 ""
V L "cX" 7 15 "int8" `1001 
f G "LCD_SetPosition" 7 15 "void(int8 cX)" `1000  "Thiet lap vi tri con tro"
F N "LCD_PutChar" 7 16 ""
V L "cX" 7 16 "int8" `1003 
f G "LCD_PutChar" 7 16 "void(int8 cX)" `1002  "Ham viet1kitu/1chuoi len LCD"
F N "LCD_PutCmd" 7 17 ""
V L "cX" 7 17 "int8" `1005 
f G "LCD_PutCmd" 7 17 "void(int8 cX)" `1004  "Ham gui lenh len LCD"
F N "LCD_PulseEnable" 7 18 ""
f G "LCD_PulseEnable" 7 18 "void()" `1006  "Xung kich hoat"
F N "LCD_SetData" 7 19 ""
V L "cX" 7 19 "int8" `1008 
f G "LCD_SetData" 7 19 "void(int8 cX)" `1007  "Dat du lieu len chan Data"
C L "LCD_SetData" 7 21 1 "FUNCTION"
F N "LCD_Init" 7 22 ""
F G "LCD_Init" 7 23 "void()" `999 
C L "LCD_Init" 7 21 1 "FUNCTION"
C L "LCD_Init" 7 21 1 "FUNCTION"
C L "LCD_Init" 7 21 1 "FUNCTION"
C L "LCD_Init" 7 21 1 "FUNCTION"
C L "LCD_Init" 7 21 1 "FUNCTION"
C L "LCD_Init" 7 21 1 "FUNCTION"
C L "LCD_Init" 7 21 1 "FUNCTION"
C L "LCD_Init" 7 21 1 "FUNCTION"
C L "LCD_Init" 7 21 2 "FUNCTION"
F N "LCD_SetPosition" 7 42 ""
V L "cX" 7 42 "int8" `1010 
F G "LCD_SetPosition" 7 43 "void(int8 cX)" `1000  "this subroutine works specifically for 4-bit Port A *"
F N "LCD_PutChar" 7 51 ""
V L "cX" 7 51 "int8" `1010 
F G "LCD_PutChar" 7 52 "void(int8 cX)" `1002  "this subroutine works specifically for 4-bit Port A *"
F N "LCD_PutCmd" 7 59 ""
V L "cX" 7 59 "int8" `1010 
F G "LCD_PutCmd" 7 60 "void(int8 cX)" `1004  "this subroutine works specifically for 4-bit Port A *"
C L "LCD_PutCmd" 7 21 1 "FUNCTION"
C L "LCD_PutCmd" 7 21 1 "FUNCTION"
F N "LCD_PulseEnable" 7 69 ""
F G "LCD_PulseEnable" 7 70 "void()" `1006 
C L "LCD_PulseEnable" 7 21 1 "FUNCTION"
C L "LCD_PulseEnable" 7 21 1 "FUNCTION"
F N "LCD_SetData" 7 77 ""
V L "cX" 7 77 "int8" `1010 
F G "LCD_SetData" 7 78 "void(int8 cX)" `1007 
D G "counter_restart_mpd_ee" 8 1 "0x00"
D G "timer_chay_lien_tuc_ee" 8 2 "counter_restart_mpd_ee + 1"
D G "timer_ktra_AC_ee" 8 3 "timer_chay_lien_tuc_ee + 1"
D G "timer_ktra_mn_ee" 8 4 "timer_ktra_AC_ee + 1"
D G "flag_error_ee" 8 5 "timer_ktra_mn_ee + 1"
D G "delta_dc_ee" 8 6 "flag_error_ee + 1"
D G "input_dc_lv2_ee" 8 7 "delta_dc_ee + 2"
V G "val_number_defaul" 0 5 "int8[11]" `1009 
V G "sch_1" 0 7 "*int8" `1010 
V G "sch_2" 0 7 "*int8" `1011 
V G "val_sch_1" 0 7 "int8" `1012 
V G "val_sch_2" 0 7 "int8" `1013 
V G "password" 0 9 "int8[5]" `1014 
V G "str_temp" 0 10 "int8[25]" `1015 
V G "time_reset_password" 0 11 "int8" `1016 
V G "state_AC" 0 13 "int8" `1017 
V G "mode" 0 14 "int8" `1018 
V G "state_mn" 0 15 "int8" `1019 
V G "refresh_menu" 0 16 "int1" `1020 
V G "timer_exit" 0 18 "int8" `1021 
V G "timer_backlight" 0 19 "int8" `1022 
V G "val_counter_restart_mpd" 0 21 "int8" `1023 
V G "counter_restart_mpd" 0 21 "int8" `1024 
V G "counter_restart_mpd_md" 0 21 "int8" `1025 
V G "counter_restart_mpd_current" 0 22 "int8" `1026 
V G "val_timer_chay_lien_tuc" 0 23 "int8" `1027 
V G "timer_chay_lien_tuc" 0 23 "int8" `1028 
V G "timer_chay_lien_tuc_md" 0 23 "int8" `1029 
V G "val_timer_ktra_AC" 0 24 "int8" `1030 
V G "timer_ktra_AC" 0 24 "int8" `1031 
V G "timer_ktra_AC_md" 0 24 "int8" `1032 
V G "val_timer_ktra_mn" 0 25 "int8" `1033 
V G "timer_ktra_mn" 0 25 "int8" `1034 
V G "timer_ktra_mn_md" 0 25 "int8" `1035 
V G "val_timer_on_mpd" 0 26 "int8" `1036 
V G "timer_on_mpd" 0 26 "int8" `1037 
V G "val_timer_off_mpd" 0 27 "int8" `1038 
V G "timer_off_mpd" 0 27 "int8" `1039 
V G "flag_timer_60s_password" 0 29 "int8" `1040 
V G "val_loading" 0 31 "int8" `1041 
V G "flag_error" 0 33 "int8" `1042 
V G "flag_mn" 0 34 "int8" `1043 
V G "counter_timer0" 0 36 "int16" `1044 
V G "flag_timer_chay_lien_tuc_60s" 0 37 "int8" `1045 
V G "flag_timer_chay_lien_tuc_60p" 0 37 "int8" `1046 
V G "pwm_lcd" 0 39 "int8" `1047 
V G "sum_out" 0 40 "int8" `1048 
V G "sum_out_old" 0 40 "int8" `1049 
V G "loop_not_display" 0 40 "int8" `1050 
V G "input_dc_lv2" 0 42 "float" `1051 
V G "input_dc_lv2_md" 0 42 "float" `1052 
V G "delta_dc" 0 43 "float" `1053 
V G "delta_dc_md" 0 43 "float" `1054 
V G "adc_accu" 0 44 "float" `1055 
F N "init_data" 0 47 ""
f G "init_data" 0 47 "void()" `1056 
F N "check_AC" 0 48 ""
f G "check_AC" 0 48 "void()" `1057 
F N "check_mn" 0 49 ""
f G "check_mn" 0 49 "int8()" `1058 
F N "default_data" 0 50 ""
f G "default_data" 0 50 "void()" `1059 
F N "display" 0 51 ""
V L "code_print" 0 51 "int8" `1061 
f G "display" 0 51 "void(int8 code_print)" `1060 
F N "key_scan" 0 52 ""
f G "key_scan" 0 52 "int8()" `1062 
F N "process_menu" 0 53 ""
f G "process_menu" 0 53 "void()" `1063 
F N "process_up" 0 54 ""
f G "process_up" 0 54 "void()" `1064 
F N "process_down" 0 55 ""
f G "process_down" 0 55 "void()" `1065 
F N "process_exit" 0 56 ""
f G "process_exit" 0 56 "void()" `1066 
F N "display_center" 0 57 ""
f G "display_center" 0 57 "void()" `1067 
F N "lcd_printf" 0 58 ""
V L "code_printf" 0 58 "int8" `1069 
f G "lcd_printf" 0 58 "void(int8 code_printf)" `1068 
F N "reset_timer_data" 0 59 ""
f G "reset_timer_data" 0 59 "void()" `1070 
F N "write_data" 0 60 ""
f G "write_data" 0 60 "void()" `1071 
F N "read_data" 0 61 ""
f G "read_data" 0 61 "void()" `1072 
F N "get_adc_accu" 0 62 ""
f G "get_adc_accu" 0 62 "void()" `1073 
F N "read_eeprom" 0 64 ""
V L "addr" 0 64 "int8" `1075 
f G "read_eeprom" 0 64 "int8(int8 addr)" `1074 
F N "write_eeprom" 0 65 ""
V L "addr" 0 65 "int8" `1077 
V L "value" 0 65 "int8" `1078 
f G "write_eeprom" 0 65 "void(int8 addr,int8 value)" `1076 
F N "read_eeprom16" 0 66 ""
V L "addr" 0 66 "int8" `1080 
f G "read_eeprom16" 0 66 "int16(int8 addr)" `1079 
F N "write_eeprom16" 0 67 ""
V L "addr" 0 67 "int8" `1082 
V L "data" 0 67 "int16" `1083 
f G "write_eeprom16" 0 67 "void(int8 addr,int16 data)" `1081 
F N "disable_reset" 0 69 ""
f G "disable_reset" 0 69 "void()" `1084  ""
F N "MAIN" 0 72 ""
F G "MAIN" 0 73 "void()" `1085 
C L "MAIN" 0 6 2 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
V L "mn" 0 132 "int8" `1091 
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
V L "mn" 0 159 "int8" `1092 
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 2 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
C L "MAIN" 0 6 1 "FUNCTION"
F N "init_data" 0 276 ""
F G "init_data" 0 277 "void()" `1056  "con tro phuc vu cai dat"
C L "init_data" 0 6 1 "FUNCTION"
C L "init_data" 0 6 1 "FUNCTION"
C L "init_data" 0 6 1 "FUNCTION"
C L "init_data" 0 6 1 "FUNCTION"
F N "get_adc_accu" 0 310 ""
F G "get_adc_accu" 0 311 "void()" `1073 
V L "i" 0 314 "int8" `1097 
V L "adc_temp" 0 316 "float" `1098 
F N "check_mn" 0 322 ""
F G "check_mn" 0 323 "int8()" `1058 
C L "check_mn" 0 6 1 "FUNCTION"
C L "check_mn" 0 6 1 "FUNCTION"
C L "check_mn" 0 6 1 "FUNCTION"
F N "check_AC" 0 339 ""
F G "check_AC" 0 340 "void()" `1057 
C L "check_AC" 0 6 1 "FUNCTION"
C L "check_AC" 0 6 1 "FUNCTION"
F N "display" 0 367 ""
V L "code_print" 0 367 "int8" `1100 
F G "display" 0 368 "void(int8 code_print)" `1060 
C L "display" 0 6 1 "FUNCTION"
C L "display" 0 6 1 "FUNCTION"
C L "display" 0 6 1 "FUNCTION"
C L "display" 0 6 1 "FUNCTION"
C L "display" 0 6 1 "FUNCTION"
C L "display" 0 6 1 "FUNCTION"
C L "display" 0 6 1 "FUNCTION"
F N "default_data" 0 434 ""
F G "default_data" 0 435 "void()" `1059 
C L "default_data" 0 6 1 "FUNCTION"
C L "default_data" 0 6 1 "FUNCTION"
C L "default_data" 0 6 1 "FUNCTION"
C L "default_data" 0 6 1 "FUNCTION"
C L "default_data" 0 6 1 "FUNCTION"
F N "display_center" 0 444 ""
F G "display_center" 0 445 "void()" `1067 
V L "menu_main" 0 446 "int8[10][17]" `1132 
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
C L "display_center" 0 6 1 "FUNCTION"
F N "reset_timer_data" 0 542 ""
F G "reset_timer_data" 0 543 "void()" `1070 
F N "lcd_printf" 0 553 ""
V L "code_printf" 0 553 "int8" `1145 
F G "lcd_printf" 0 554 "void(int8 code_printf)" `1068 
F N "key_scan" 0 607 ""
F G "key_scan" 0 608 "int8()" `1062 
V L "bounce" 0 609 "int16" `1155 
F N "process_menu" 0 674 ""
F G "process_menu" 0 675 "void()" `1063 
C L "process_menu" 0 6 1 "FUNCTION"
C L "process_menu" 0 6 1 "FUNCTION"
F N "process_up" 0 704 ""
F G "process_up" 0 705 "void()" `1064 
C L "process_up" 0 6 1 "FUNCTION"
C L "process_up" 0 6 1 "FUNCTION"
C L "process_up" 0 6 1 "FUNCTION"
C L "process_up" 0 6 1 "FUNCTION"
C L "process_up" 0 6 1 "FUNCTION"
C L "process_up" 0 6 1 "FUNCTION"
C L "process_up" 0 6 1 "FUNCTION"
C L "process_up" 0 6 1 "FUNCTION"
C L "process_up" 0 6 1 "FUNCTION"
C L "process_up" 0 6 1 "FUNCTION"
F N "process_down" 0 773 ""
F G "process_down" 0 774 "void()" `1065 
C L "process_down" 0 6 1 "FUNCTION"
C L "process_down" 0 6 1 "FUNCTION"
C L "process_down" 0 6 1 "FUNCTION"
C L "process_down" 0 6 1 "FUNCTION"
C L "process_down" 0 6 1 "FUNCTION"
C L "process_down" 0 6 1 "FUNCTION"
C L "process_down" 0 6 1 "FUNCTION"
C L "process_down" 0 6 1 "FUNCTION"
C L "process_down" 0 6 1 "FUNCTION"
C L "process_down" 0 6 1 "FUNCTION"
F N "process_exit" 0 840 ""
F G "process_exit" 0 841 "void()" `1066 
V L "val_null" 0 843 "int8" `1158 
C L "process_exit" 0 6 1 "FUNCTION"
C L "process_exit" 0 6 1 "FUNCTION"
F N "write_eeprom16" 0 867 ""
V L "addr" 0 867 "int8" `1082 
V L "data" 0 867 "int16" `1161 
F G "write_eeprom16" 0 868 "void(int8 addr,int16 data)" `1081 
F N "read_eeprom16" 0 873 ""
V L "addr" 0 873 "int8" `1160 
F G "read_eeprom16" 0 874 "int16(int8 addr)" `1079 
F N "write_data" 0 878 ""
F G "write_data" 0 879 "void()" `1071 
F N "read_data" 0 890 ""
F G "read_data" 0 891 "void()" `1072 
F N "disable_reset" 0 903 ""
F G "disable_reset" 0 904 "void()" `1084 
F N "interrupt_timer0" 0 921 ""
F G "interrupt_timer0" 0 922 "void()" `1161 
C L "interrupt_timer0" 0 6 1 "FUNCTION"
C L "interrupt_timer0" 0 6 1 "FUNCTION"
C L "interrupt_timer0" 0 6 1 "FUNCTION"
C L "interrupt_timer0" 0 6 1 "FUNCTION"
C L "interrupt_timer0" 0 6 1 "FUNCTION"
C L "interrupt_timer0" 0 6 1 "FUNCTION"
C L "interrupt_timer0" 0 6 1 "FUNCTION"
C L "interrupt_timer0" 0 6 1 "FUNCTION"
C L "interrupt_timer0" 0 6 1 "FUNCTION"
C L "interrupt_timer0" 0 6 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_e" 1 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
