D G "__PCH__" 0 0 ""5.109""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""24-Mar-23""
D G "__TIME__" 0 0 ""20:29:00""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?"" "Standard Header file for the PIC18F26K20 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
F N "set_tris_a" 1 43 ""
V L "value" 1 43 "int8" `55 
F B "set_tris_a" 1 43 "void(int8 value)" `54 
F N "set_tris_b" 1 44 ""
V L "value" 1 44 "int8" `57 
F B "set_tris_b" 1 44 "void(int8 value)" `56 
F N "set_tris_c" 1 45 ""
V L "value" 1 45 "int8" `59 
F B "set_tris_c" 1 45 "void(int8 value)" `58 
F N "set_tris_e" 1 46 ""
V L "value" 1 46 "int8" `61 
F B "set_tris_e" 1 46 "void(int8 value)" `60 
F N "get_tris_a" 1 47 ""
F B "get_tris_a" 1 47 "int8()" `62 
F N "get_tris_b" 1 48 ""
F B "get_tris_b" 1 48 "int8()" `63 
F N "get_tris_c" 1 49 ""
F B "get_tris_c" 1 49 "int8()" `64 
F N "get_tris_e" 1 50 ""
F B "get_tris_e" 1 50 "int8()" `65 
F N "output_a" 1 51 ""
V L "value" 1 51 "int8" `67 
F B "output_a" 1 51 "void(int8 value)" `66 
F N "output_b" 1 52 ""
V L "value" 1 52 "int8" `69 
F B "output_b" 1 52 "void(int8 value)" `68 
F N "output_c" 1 53 ""
V L "value" 1 53 "int8" `71 
F B "output_c" 1 53 "void(int8 value)" `70 
F N "output_e" 1 54 ""
V L "value" 1 54 "int8" `73 
F B "output_e" 1 54 "void(int8 value)" `72 
F N "input_a" 1 55 ""
F B "input_a" 1 55 "int8()" `74 
F N "input_b" 1 56 ""
F B "input_b" 1 56 "int8()" `75 
F N "input_c" 1 57 ""
F B "input_c" 1 57 "int8()" `76 
F N "input_e" 1 58 ""
F B "input_e" 1 58 "int8()" `77 
F N "input_change_a" 1 59 ""
F B "input_change_a" 1 59 "int8()" `78 
F N "input_change_b" 1 60 ""
F B "input_change_b" 1 60 "int8()" `79 
F N "input_change_c" 1 61 ""
F B "input_change_c" 1 61 "int8()" `80 
F N "input_change_e" 1 62 ""
F B "input_change_e" 1 62 "int8()" `81 
F N "port_b_pullups" 1 63 ""
V L "upmask" 1 63 "int8" `83 
F B "port_b_pullups" 1 63 "void(int8 upmask)" `82 
F N "set_slow_slew_a" 1 64 ""
V L "value" 1 64 "int8" `85 
F B "set_slow_slew_a" 1 64 "void(int8 value)" `84 
F N "set_slow_slew_b" 1 65 ""
V L "value" 1 65 "int8" `87 
F B "set_slow_slew_b" 1 65 "void(int8 value)" `86 
F N "set_slow_slew_c" 1 66 ""
V L "value" 1 66 "int8" `89 
F B "set_slow_slew_c" 1 66 "void(int8 value)" `88 
F N "set_slow_slew_e" 1 67 ""
V L "value" 1 67 "int8" `91 
F B "set_slow_slew_e" 1 67 "void(int8 value)" `90 
F N "input" 1 68 ""
V L "pin" 1 68 "int16" `93 
F B "input" 1 68 "int8(int16 pin)" `92 
F N "input_state" 1 69 ""
V L "pin" 1 69 "int16" `95 
F B "input_state" 1 69 "int8(int16 pin)" `94 
F N "output_low" 1 70 ""
V L "pin" 1 70 "int16" `97 
F B "output_low" 1 70 "void(int16 pin)" `96 
F N "output_high" 1 71 ""
V L "pin" 1 71 "int16" `99 
F B "output_high" 1 71 "void(int16 pin)" `98 
F N "output_toggle" 1 72 ""
V L "pin" 1 72 "int16" `101 
F B "output_toggle" 1 72 "void(int16 pin)" `100 
F N "output_bit" 1 73 ""
V L "pin" 1 73 "int16" `103 
V L "level" 1 73 "int8" `104 
F B "output_bit" 1 73 "void(int16 pin,int8 level)" `102 
F N "output_float" 1 74 ""
V L "pin" 1 74 "int16" `106 
F B "output_float" 1 74 "void(int16 pin)" `105 
F N "output_drive" 1 75 ""
V L "pin" 1 75 "int16" `108 
F B "output_drive" 1 75 "void(int16 pin)" `107  "Constants used to identify pins in the above are:"
D G "PIN_A0" 1 79 "31744"
D G "PIN_A1" 1 80 "31745"
D G "PIN_A2" 1 81 "31746"
D G "PIN_A3" 1 82 "31747"
D G "PIN_A4" 1 83 "31748"
D G "PIN_A5" 1 84 "31749"
D G "PIN_A6" 1 85 "31750"
D G "PIN_A7" 1 86 "31751"
D G "PIN_B0" 1 88 "31752"
D G "PIN_B1" 1 89 "31753"
D G "PIN_B2" 1 90 "31754"
D G "PIN_B3" 1 91 "31755"
D G "PIN_B4" 1 92 "31756"
D G "PIN_B5" 1 93 "31757"
D G "PIN_B6" 1 94 "31758"
D G "PIN_B7" 1 95 "31759"
D G "PIN_C0" 1 97 "31760"
D G "PIN_C1" 1 98 "31761"
D G "PIN_C2" 1 99 "31762"
D G "PIN_C3" 1 100 "31763"
D G "PIN_C4" 1 101 "31764"
D G "PIN_C5" 1 102 "31765"
D G "PIN_C6" 1 103 "31766"
D G "PIN_C7" 1 104 "31767"
D G "PIN_E3" 1 106 "31779"
D G "FALSE" 1 109 "0"
D G "TRUE" 1 110 "1"
D G "BYTE" 1 112 "int8"
D G "BOOLEAN" 1 113 "int1"
D G "getc" 1 115 "getch"
D G "fgetc" 1 116 "getch"
D G "getchar" 1 117 "getch"
D G "putc" 1 118 "putchar"
D G "fputc" 1 119 "putchar"
D G "fgets" 1 120 "gets"
D G "fputs" 1 121 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
F N "restart_cause" 1 126 ""
F B "restart_cause" 1 126 "int8()" `109 
F N "reset_cpu" 1 127 ""
F B "reset_cpu" 1 127 "void()" `110 
F N "sleep" 1 128 ""
F B "sleep" 1 128 "void()" `111 
F N "sleep" 1 129 ""
V L "type" 1 129 "int8" `113 
F B "sleep" 1 129 "void(int8 type)" `112  "Constants returned from RESTART_CAUSE() are:"
D G "WDT_TIMEOUT" 1 131 "7"
D G "MCLR_FROM_SLEEP" 1 132 "11"
D G "MCLR_FROM_RUN" 1 133 "15"
D G "NORMAL_POWER_UP" 1 134 "12"
D G "BROWNOUT_RESTART" 1 135 "14"
D G "WDT_FROM_SLEEP" 1 136 "3"
D G "RESET_INSTRUCTION" 1 137 "0"
D G "SLEEP_FULL" 1 140 "0" "Default"
D G "SLEEP_IDLE" 1 141 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 5 "FUNCTION"
F N "setup_timer_0" 1 148 ""
V L "mode" 1 148 "int8" `115 
F B "setup_timer_0" 1 148 "void(int8 mode)" `114 
F N "set_timer0" 1 149 ""
V L "value" 1 149 "int16" `117 
F B "set_timer0" 1 149 "void(int16 value)" `116 
F N "get_timer0" 1 150 ""
F B "get_timer0" 1 150 "int16()" `118 
F N "setup_counters" 1 151 ""
V L "mode" 1 151 "int8" `120 
V L "prescaler" 1 151 "int8" `121 
F B "setup_counters" 1 151 "void(int8 mode,int8 prescaler)" `119 
F N "set_rtcc" 1 152 ""
V L "value" 1 152 "int16" `123 
F B "set_rtcc" 1 152 "void(int16 value)" `122 
F N "get_rtcc" 1 153 ""
F B "get_rtcc" 1 153 "int16()" `124  "Constants used for SETUP_TIMER_0() are:"
D G "T0_INTERNAL" 1 155 "0"
D G "T0_EXT_L_TO_H" 1 156 "32"
D G "T0_EXT_H_TO_L" 1 157 "48"
D G "T0_DIV_1" 1 159 "8"
D G "T0_DIV_2" 1 160 "0"
D G "T0_DIV_4" 1 161 "1"
D G "T0_DIV_8" 1 162 "2"
D G "T0_DIV_16" 1 163 "3"
D G "T0_DIV_32" 1 164 "4"
D G "T0_DIV_64" 1 165 "5"
D G "T0_DIV_128" 1 166 "6"
D G "T0_DIV_256" 1 167 "7"
D G "T0_OFF" 1 169 "0x80"
D G "T0_8_BIT" 1 171 "0x40"
D G "RTCC_INTERNAL" 1 175 "0"
D G "RTCC_EXT_L_TO_H" 1 176 "32"
D G "RTCC_EXT_H_TO_L" 1 177 "48"
D G "RTCC_DIV_1" 1 178 "8"
D G "RTCC_DIV_2" 1 179 "0"
D G "RTCC_DIV_4" 1 180 "1"
D G "RTCC_DIV_8" 1 181 "2"
D G "RTCC_DIV_16" 1 182 "3"
D G "RTCC_DIV_32" 1 183 "4"
D G "RTCC_DIV_64" 1 184 "5"
D G "RTCC_DIV_128" 1 185 "6"
D G "RTCC_DIV_256" 1 186 "7"
D G "RTCC_OFF" 1 187 "0x80"
D G "RTCC_8_BIT" 1 188 "0x40"
c L "get_rtcc" 1 3 8 "FUNCTION"
F N "setup_wdt" 1 199 ""
V L "mode" 1 199 "int16" `126 
F B "setup_wdt" 1 199 "void(int16 mode)" `125 
F N "restart_wdt" 1 200 ""
F B "restart_wdt" 1 200 "void()" `127  "Constants used for SETUP_WDT() are:"
D G "WDT_ON" 1 202 "0x100"
D G "WDT_OFF" 1 203 "0"
D G "WDT_4MS" 1 205 "0x300"
D G "WDT_8MS" 1 206 "0x500"
D G "WDT_16MS" 1 207 "0x700"
D G "WDT_32MS" 1 208 "0x900"
D G "WDT_64MS" 1 209 "0xB00"
D G "WDT_128MS" 1 210 "0xD00"
D G "WDT_256MS" 1 211 "0xF00"
D G "WDT_512MS" 1 212 "0x1100"
D G "WDT_1S" 1 213 "0x1300"
D G "WDT_2S" 1 214 "0x1500"
D G "WDT_4S" 1 215 "0x1700"
D G "WDT_8S" 1 216 "0x1900"
D G "WDT_16S" 1 217 "0x1B00"
D G "WDT_32S" 1 218 "0x1D00"
D G "WDT_64S" 1 219 "0x1F00"
D G "WDT_128S" 1 220 "0x2100"
c L "restart_wdt" 1 3 3 "FUNCTION"
F N "setup_timer_1" 1 225 ""
V L "mode" 1 225 "int16" `129 
F B "setup_timer_1" 1 225 "void(int16 mode)" `128 
F N "get_timer1" 1 226 ""
F B "get_timer1" 1 226 "int16()" `130 
F N "set_timer1" 1 227 ""
V L "value" 1 227 "int16" `132 
F B "set_timer1" 1 227 "void(int16 value)" `131  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 1 230 "0"
D G "T1_INTERNAL" 1 231 "0x85"
D G "T1_EXTERNAL" 1 232 "0x87"
D G "T1_EXTERNAL_SYNC" 1 233 "0x83"
D G "T1_CLK_OUT" 1 235 "8"
D G "T1_DIV_BY_1" 1 237 "0"
D G "T1_DIV_BY_2" 1 238 "0x10"
D G "T1_DIV_BY_4" 1 239 "0x20"
D G "T1_DIV_BY_8" 1 240 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
F N "setup_timer_2" 1 245 ""
V L "mode" 1 245 "int8" `134 
V L "period" 1 245 "int8" `135 
V L "postscale" 1 245 "int8" `136 
F B "setup_timer_2" 1 245 "void(int8 mode,int8 period,int8 postscale)" `133 
F N "get_timer2" 1 246 ""
F B "get_timer2" 1 246 "int8()" `137 
F N "set_timer2" 1 247 ""
V L "value" 1 247 "int8" `139 
F B "set_timer2" 1 247 "void(int8 value)" `138  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 1 249 "0"
D G "T2_DIV_BY_1" 1 250 "4"
D G "T2_DIV_BY_4" 1 251 "5"
D G "T2_DIV_BY_16" 1 252 "6"
c L "set_timer2" 1 3 3 "FUNCTION"
F N "setup_timer_3" 1 257 ""
V L "mode" 1 257 "int16" `141 
F B "setup_timer_3" 1 257 "void(int16 mode)" `140 
F N "get_timer3" 1 258 ""
F B "get_timer3" 1 258 "int16()" `142 
F N "set_timer3" 1 259 ""
V L "value" 1 259 "int16" `144 
F B "set_timer3" 1 259 "void(int16 value)" `143  "Constants used for SETUP_TIMER_3() are:"
D G "T3_DISABLED" 1 262 "0"
D G "T3_INTERNAL" 1 263 "0x85"
D G "T3_EXTERNAL" 1 264 "0x87"
D G "T3_EXTERNAL_SYNC" 1 265 "0x83"
D G "T3_DIV_BY_1" 1 267 "0"
D G "T3_DIV_BY_2" 1 268 "0x10"
D G "T3_DIV_BY_4" 1 269 "0x20"
D G "T3_DIV_BY_8" 1 270 "0x30"
D G "T3_CCP1_TO_2" 1 273 "0x48"
D G "T3_CCP2" 1 274 "0x8"
c L "set_timer3" 1 3 4 "FUNCTION"
F N "setup_ccp1" 1 280 ""
V L "mode" 1 280 "int32" `146 
F B "setup_ccp1" 1 280 "void(int32 mode)" `145 
F N "setup_ccp1" 1 281 ""
V L "mode" 1 281 "int32" `148 
V L "pwm" 1 281 "int8" `149 
F B "setup_ccp1" 1 281 "void(int32 mode,int8 pwm)" `147 
F N "set_pwm1_duty" 1 282 ""
V L "value" 1 282 "int8" `151 
F B "set_pwm1_duty" 1 282 "void(int8 value)" `150 
F N "set_pwm1_duty" 1 283 ""
V L "value" 1 283 "int16" `153 
F B "set_pwm1_duty" 1 283 "void(int16 value)" `152  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 1 285 "0"
D G "CCP_CAPTURE_FE" 1 286 "0x04"
D G "CCP_CAPTURE_RE" 1 287 "0x05"
D G "CCP_CAPTURE_DIV_4" 1 288 "0x06"
D G "CCP_CAPTURE_DIV_16" 1 289 "0x07"
D G "CCP_COMPARE_SET_ON_MATCH" 1 290 "0x08"
D G "CCP_COMPARE_CLR_ON_MATCH" 1 291 "0x09"
D G "CCP_COMPARE_INT" 1 292 "0x0A"
D G "CCP_COMPARE_INT_AND_TOGGLE" 1 293 "0x02"
D G "CCP_COMPARE_RESET_TIMER" 1 294 "0x0B"
D G "CCP_PWM" 1 295 "0x0C"
D G "CCP_PWM_PLUS_1" 1 296 "0x1c"
D G "CCP_PWM_PLUS_2" 1 297 "0x2c"
D G "CCP_PWM_PLUS_3" 1 298 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
D G "CCP_PWM_H_H" 1 306 "0x0c"
D G "CCP_PWM_H_L" 1 307 "0x0d"
D G "CCP_PWM_L_H" 1 308 "0x0e"
D G "CCP_PWM_L_L" 1 309 "0x0f"
D G "CCP_PWM_FULL_BRIDGE" 1 311 "0x40"
D G "CCP_PWM_FULL_BRIDGE_REV" 1 312 "0xC0"
D G "CCP_PWM_HALF_BRIDGE" 1 313 "0x80"
D G "CCP_SHUTDOWN_ON_COMP1" 1 315 "0x100000"
D G "CCP_SHUTDOWN_ON_COMP2" 1 316 "0x200000"
D G "CCP_SHUTDOWN_ON_COMP" 1 317 "0x300000"
D G "CCP_SHUTDOWN_ON_INT0" 1 318 "0x400000"
D G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 319 "0x500000"
D G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 320 "0x600000"
D G "CCP_SHUTDOWN_ON_COMP_INT0" 1 321 "0x700000"
D G "CCP_SHUTDOWN_AC_L" 1 323 "0x000000"
D G "CCP_SHUTDOWN_AC_H" 1 324 "0x040000"
D G "CCP_SHUTDOWN_AC_F" 1 325 "0x080000"
D G "CCP_SHUTDOWN_BD_L" 1 327 "0x000000"
D G "CCP_SHUTDOWN_BD_H" 1 328 "0x010000"
D G "CCP_SHUTDOWN_BD_F" 1 329 "0x020000"
D G "CCP_SHUTDOWN_RESTART" 1 331 "0x80000000"
D G "CCP_PULSE_STEERING_A" 1 333 "0x01000000"
D G "CCP_PULSE_STEERING_B" 1 334 "0x02000000"
D G "CCP_PULSE_STEERING_C" 1 335 "0x04000000"
D G "CCP_PULSE_STEERING_D" 1 336 "0x08000000"
D G "CCP_PULSE_STEERING_SYNC" 1 337 "0x10000000"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
F N "setup_ccp2" 1 340 ""
V L "mode" 1 340 "int32" `158 
F B "setup_ccp2" 1 340 "void(int32 mode)" `157 
F N "setup_ccp2" 1 341 ""
V L "mode" 1 341 "int32" `160 
V L "pwm" 1 341 "int8" `161 
F B "setup_ccp2" 1 341 "void(int32 mode,int8 pwm)" `159 
F N "set_pwm2_duty" 1 342 ""
V L "value" 1 342 "int8" `163 
F B "set_pwm2_duty" 1 342 "void(int8 value)" `162 
F N "set_pwm2_duty" 1 343 ""
V L "value" 1 343 "int16" `165 
F B "set_pwm2_duty" 1 343 "void(int16 value)" `164 
c L "set_pwm2_duty" 1 3 3 "FUNCTION"
F N "setup_spi" 1 351 ""
V L "mode" 1 351 "int32" `170 
F B "setup_spi" 1 351 "void(int32 mode)" `169 
F N "spi_write" 1 352 ""
V L "value" 1 352 "int8" `172 
F B "spi_write" 1 352 "void(int8 value)" `171 
F N "spi_write" 1 353 ""
V L "wait" 1 353 "int8" `174 
V L "value" 1 353 "int8" `175 
F B "spi_write" 1 353 "void(int8 wait,int8 value)" `173 
F N "spi_read" 1 354 ""
F B "spi_read" 1 354 "int8()" `176 
F N "spi_read" 1 355 ""
V L "value" 1 355 "int8" `178 
F B "spi_read" 1 355 "int8(int8 value)" `177 
F N "spi_data_is_in" 1 356 ""
F B "spi_data_is_in" 1 356 "int8()" `179 
F N "setup_spi2" 1 357 ""
V L "mode" 1 357 "int32" `181 
F B "setup_spi2" 1 357 "void(int32 mode)" `180 
F N "spi_write2" 1 358 ""
V L "value" 1 358 "int8" `183 
F B "spi_write2" 1 358 "void(int8 value)" `182 
F N "spi_read2" 1 359 ""
F B "spi_read2" 1 359 "int8()" `184 
F N "spi_read2" 1 360 ""
V L "value" 1 360 "int8" `186 
F B "spi_read2" 1 360 "int8(int8 value)" `185 
F N "spi_data_is_in2" 1 361 ""
F B "spi_data_is_in2" 1 361 "int8()" `187  "Constants used in SETUP_SPI() are:"
D G "SPI_DISABLED" 1 363 "0x00"
D G "SPI_MASTER" 1 364 "0x20"
D G "SPI_SLAVE" 1 365 "0x24"
D G "SPI_SCK_IDLE_HIGH" 1 366 "0x10"
D G "SPI_SCK_IDLE_LOW" 1 367 "0x00"
D G "SPI_CLK_DIV_4" 1 368 "0x00"
D G "SPI_CLK_DIV_16" 1 369 "0x01"
D G "SPI_CLK_DIV_64" 1 370 "0x02"
D G "SPI_CLK_T2" 1 371 "0x03"
D G "SPI_SS_DISABLED" 1 372 "0x01"
D G "SPI_XMIT_L_TO_H" 1 374 "0x4000"
D G "SPI_XMIT_H_TO_L" 1 375 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 1 377 "0x0000"
D G "SPI_SAMPLE_AT_END" 1 378 "0x8000"
D G "SPI_L_TO_H" 1 381 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 1 382 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 1 3 2 "FUNCTION"
F N "setup_uart" 1 386 ""
V L "baud" 1 386 "int32" `189 
F B "setup_uart" 1 386 "void(int32 baud)" `188 
F N "setup_uart" 1 387 ""
V L "baud" 1 387 "int32" `191 
V L "stream" 1 387 "int8" `192 
F B "setup_uart" 1 387 "void(int32 baud,int8 stream)" `190 
F N "setup_uart" 1 388 ""
V L "baud" 1 388 "int32" `194 
V L "stream" 1 388 "int8" `195 
V L "clock" 1 388 "int32" `196 
F B "setup_uart" 1 388 "void(int32 baud,int8 stream,int32 clock)" `193 
F N "set_uart_speed" 1 389 ""
V L "baud" 1 389 "int32" `198 
F B "set_uart_speed" 1 389 "void(int32 baud)" `197 
F N "set_uart_speed" 1 390 ""
V L "baud" 1 390 "int32" `200 
V L "stream" 1 390 "int8" `201 
F B "set_uart_speed" 1 390 "void(int32 baud,int8 stream)" `199 
F N "set_uart_speed" 1 391 ""
V L "baud" 1 391 "int32" `203 
V L "stream" 1 391 "int8" `204 
V L "clock" 1 391 "int32" `205 
F B "set_uart_speed" 1 391 "void(int32 baud,int8 stream,int32 clock)" `202  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 1 395 "2"
D G "UART_DATA" 1 396 "4"
D G "UART_AUTODETECT" 1 397 "8"
D G "UART_AUTODETECT_NOWAIT" 1 398 "9"
D G "UART_WAKEUP_ON_RDA" 1 399 "10"
D G "UART_SEND_BREAK" 1 400 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
F N "setup_comparator" 1 405 ""
V L "mode" 1 405 "int32" `207 
F B "setup_comparator" 1 405 "void(int32 mode)" `206  "Constants used in setup_comparator() are:"
D G "NC_NC_NC_NC" 1 408 "0x404"
D G "NC_NC" 1 409 "0x404"
D G "CP1_A0_A3" 1 412 "0x4000088"
D G "CP1_A1_A3" 1 413 "0x0100089"
D G "CP1_B3_A3" 1 414 "0x020008A"
D G "CP1_B1_A3" 1 415 "0x040008B"
D G "CP1_A0_VREF" 1 416 "0x400008C"
D G "CP1_A1_VREF" 1 417 "0x010008D"
D G "CP1_B3_VREF" 1 418 "0x020008E"
D G "CP1_B1_VREF" 1 419 "0x040008F"
D G "CP1_OUT_ON_A4" 1 421 "0x2000020"
D G "CP1_INVERT" 1 422 "0x0000010"
D G "CP1_FAST" 1 423 "0x0000008"
D G "CP2_A0_A2" 1 426 "0x4008800"
D G "CP2_A1_A2" 1 427 "0x0108900"
D G "CP2_B3_A2" 1 428 "0x0208A00"
D G "CP2_B1_A2" 1 429 "0x0408B00"
D G "CP2_A0_VREF" 1 430 "0x4008C00"
D G "CP2_A1_VREF" 1 431 "0x0108D00"
D G "CP2_B3_VREF" 1 432 "0x0208E00"
D G "CP2_B1_VREF" 1 433 "0x0408F00"
D G "CP2_OUT_ON_A5" 1 435 "0x0082000"
D G "CP2_INVERT" 1 436 "0x0001000"
D G "CP2_FAST" 1 437 "0x0000800"
c L "setup_comparator" 1 3 2 "FUNCTION"
F N "setup_vref" 1 444 ""
V L "mode" 1 444 "int16" `211 
F B "setup_vref" 1 444 "void(int16 mode)" `210  "Constants used in setup_vref() are:"
D G "VREF_LOW" 1 446 "0xA0"
D G "VREF_HIGH" 1 447 "0x80"
D G "VREF_EXT" 1 448 "0x10" "Range for ref gen VREF- to VREF+"
D G "VREF_FVR" 1 449 "0x8000"
c L "setup_vref" 1 3 3 "FUNCTION"
F N "setup_low_volt_detect" 1 454 ""
V L "mode" 1 454 "int8" `213 
F B "setup_low_volt_detect" 1 454 "void(int8 mode)" `212  "Constants used in setup_low_volt_detect() are:"
D G "LVD_LVDIN" 1 456 "0x1F"
D G "LVD_35" 1 457 "0x1E"
D G "LVD_33" 1 458 "0x1D"
D G "LVD_30" 1 459 "0x1C"
D G "LVD_29" 1 460 "0x1B"
D G "LVD_28" 1 461 "0x1A"
D G "LVD_27" 1 462 "0x19"
D G "LVD_26" 1 463 "0x18"
D G "LVD_25" 1 464 "0x17"
D G "LVD_24" 1 465 "0x16"
D G "LVD_23" 1 466 "0x15"
D G "LVD_22" 1 467 "0x14"
D G "LVD_21" 1 468 "0x13"
D G "LVD_20" 1 469 "0x12"
D G "LVD_19" 1 470 "0x11"
D G "LVD_18" 1 471 "0x10"
D G "LVD_TRIGGER_BELOW" 1 473 "0"
D G "LVD_TRIGGER_ABOVE" 1 474 "0x80"
D G "LVD_INTERRUPT" 1 475 "0x20"
c L "setup_low_volt_detect" 1 3 2 "FUNCTION"
F N "setup_oscillator" 1 480 ""
V L "mode" 1 480 "int16" `215 
F B "setup_oscillator" 1 480 "int8(int16 mode)" `214 
F N "setup_oscillator" 1 481 ""
V L "mode" 1 481 "int16" `217 
V L "tune" 1 481 "sint8" `218 
F B "setup_oscillator" 1 481 "int8(int16 mode,sint8 tune)" `216  "Constants used in setup_oscillator() are:"
D G "OSC_PLL_ON" 1 483 "0x4000"
D G "OSC_PLL_OFF" 1 484 "0"
D G "OSC_31250" 1 485 "0x8000"
D G "OSC_31KHZ" 1 486 "0x00"
D G "OSC_250KHZ" 1 487 "0x10"
D G "OSC_500KHZ" 1 488 "0x20"
D G "OSC_1MHZ" 1 489 "0x30"
D G "OSC_2MHZ" 1 490 "0x40"
D G "OSC_4MHZ" 1 491 "0x50"
D G "OSC_8MHZ" 1 492 "0x60"
D G "OSC_16MHZ" 1 493 "0x70"
D G "OSC_32MHZ" 1 494 "0x4060"
D G "OSC_64MHZ" 1 495 "0x4070"
D G "OSC_TIMER1" 1 497 "1"
D G "OSC_INTRC" 1 498 "2"
D G "OSC_NORMAL" 1 499 "0"
D G "OSC_IDLE_MODE" 1 501 "0x80"
D G "OSC_STATE_STABLE" 1 505 "4"
D G "OSC_STATE_EXT_RUNNING" 1 506 "8"
c L "setup_oscillator" 1 3 4 "FUNCTION"
F N "setup_adc" 1 513 ""
V L "mode" 1 513 "int16" `220 
F B "setup_adc" 1 513 "void(int16 mode)" `219 
F N "read_adc" 1 514 ""
F B "read_adc" 1 514 "int8()" `221 
F N "read_adc" 1 515 ""
V L "mode" 1 515 "int8" `223 
F B "read_adc" 1 515 "int8(int8 mode)" `222 
F N "read_adc" 1 516 ""
f G "read_adc" 1 516 "int16()" `224 
F N "read_adc" 1 517 ""
V L "mode" 1 517 "int8" `225 
f G "read_adc" 1 517 "int16(int8 mode)" `224 
F N "adc_done" 1 518 ""
F B "adc_done" 1 518 "int8(int8 mode)" `224  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 1 520 "0" "ADC Off"
D G "ADC_CLOCK_DIV_2" 1 521 "0x100"
D G "ADC_CLOCK_DIV_4" 1 522 "0x04"
D G "ADC_CLOCK_DIV_8" 1 523 "0x01"
D G "ADC_CLOCK_DIV_16" 1 524 "0x05"
D G "ADC_CLOCK_DIV_32" 1 525 "0x02"
D G "ADC_CLOCK_DIV_64" 1 526 "0x06"
D G "ADC_CLOCK_INTERNAL" 1 527 "0x07" "Internal 2-6us"
D G "ADC_TAD_MUL_0" 1 529 "0x00"
D G "ADC_TAD_MUL_2" 1 530 "0x08"
D G "ADC_TAD_MUL_4" 1 531 "0x10"
D G "ADC_TAD_MUL_6" 1 532 "0x18"
D G "ADC_TAD_MUL_8" 1 533 "0x20"
D G "ADC_TAD_MUL_12" 1 534 "0x28"
D G "ADC_TAD_MUL_16" 1 535 "0x30"
D G "ADC_TAD_MUL_20" 1 536 "0x38"
c L "adc_done" 1 3 1 "FUNCTION"
F N "setup_adc_ports" 1 539 ""
V L "pins" 1 539 "int32" `226 
F B "setup_adc_ports" 1 539 "void(int32 pins)" `225 
F N "setup_adc_ports" 1 540 ""
V L "pins" 1 540 "int32" `228 
V L "reference" 1 540 "int32" `229 
F B "setup_adc_ports" 1 540 "void(int32 pins,int32 reference)" `227 
F N "set_analog_pins" 1 541 ""
V L "pins" 1 541 "int32" `231 
F B "set_analog_pins" 1 541 "void(int32 pins)" `230 
F N "set_analog_pins" 1 542 ""
V L "pins" 1 542 "int32" `233 
V L "reference" 1 542 "int32" `234 
F B "set_analog_pins" 1 542 "void(int32 pins,int32 reference)" `232 
F N "set_adc_channel" 1 543 ""
V L "channel" 1 543 "int8" `236 
F B "set_adc_channel" 1 543 "void(int8 channel)" `235  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
D G "sAN0" 1 547 "0x10000" "| A0"
D G "sAN1" 1 548 "0x20000" "| A1"
D G "sAN2" 1 549 "0x40000" "| A2"
D G "sAN3" 1 550 "0x80000" "| A3"
D G "sAN4" 1 551 "0x100000" "| A5"
D G "sAN5" 1 552 "0x200000" "| E0"
D G "sAN6" 1 553 "0x400000" "| E1"
D G "sAN7" 1 554 "0x800000" "| E2"
D G "sAN8" 1 555 "0x1" "| B2"
D G "sAN9" 1 556 "0x2" "| B3"
D G "sAN10" 1 557 "0x4" "| B1"
D G "sAN11" 1 558 "0x8" "| B4"
D G "sAN12" 1 559 "0x10" "| B0"
D G "NO_ANALOGS" 1 560 "0" "None"
D G "ALL_ANALOG" 1 561 "0xFF001F" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
D G "VSS_VDD" 1 564 "0x0000" "| Range 0-Vdd"
D G "VSS_VREF" 1 565 "0x1000" "| Range 0-Vref"
D G "VREF_VREF" 1 566 "0x3000" "| Range Vref-Vref"
D G "VREF_VDD" 1 567 "0x2000" "| Range Vref-Vdd"
D G "ADC_START_AND_READ" 1 570 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 1 571 "1"
D G "ADC_READ_ONLY" 1 572 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
F N "abs" 1 578 ""
V L "x" 1 578 "sint8" `238 
F B "abs" 1 578 "sint8(sint8 x)" `237 
F N "abs" 1 579 ""
V L "x" 1 579 "sint16" `240 
F B "abs" 1 579 "sint16(sint16 x)" `239 
F N "abs" 1 580 ""
V L "x" 1 580 "sint32" `242 
F B "abs" 1 580 "sint32(sint32 x)" `241 
F N "abs" 1 581 ""
V L "x" 1 581 "float" `244 
F B "abs" 1 581 "float(float x)" `243 
F N "_mul" 1 582 ""
V L "??65535" 1 582 "int8" `246 
V L "??65535" 1 582 "int8" `247 
F B "_mul" 1 582 "int16(int8 ,int8 )" `245 
F N "_mul" 1 583 ""
V L "??65535" 1 583 "sint8" `249 
V L "??65535" 1 583 "sint8" `250 
F B "_mul" 1 583 "sint16(sint8 ,sint8 )" `248 
F N "_mul" 1 584 ""
V L "??65535" 1 584 "int16" `252 
V L "??65535" 1 584 "int16" `253 
F B "_mul" 1 584 "int32(int16 ,int16 )" `251 
F N "_mul" 1 585 ""
V L "??65535" 1 585 "sint16" `255 
V L "??65535" 1 585 "sint16" `256 
F B "_mul" 1 585 "sint32(sint16 ,sint16 )" `254  "Memory Manipulation Prototypes:"
F N "read_bank" 1 588 ""
V L "bank" 1 588 "int8" `258 
V L "offset" 1 588 "int8" `259 
F B "read_bank" 1 588 "int8(int8 bank,int8 offset)" `257 
F N "write_bank" 1 589 ""
V L "bank" 1 589 "int8" `261 
V L "offset" 1 589 "int8" `262 
V L "value" 1 589 "int8" `263 
F B "write_bank" 1 589 "void(int8 bank,int8 offset,int8 value)" `260 
F N "strcpy" 1 590 ""
V L "dest" 1 590 "*int8" `265 
V L "src" 1 590 "*int8" `266 
F B "strcpy" 1 590 "void(*int8 dest,*int8 src)" `264 
F N "memset" 1 591 ""
V L "destination" 1 591 "*int8" `268 
V L "value" 1 591 "int8" `269 
V L "num" 1 591 "int16" `270 
F B "memset" 1 591 "void(*int8 destination,int8 value,int16 num)" `267 
F N "memcpy" 1 592 ""
V L "destination" 1 592 "*int8" `272 
V L "source" 1 592 "*int8" `273 
V L "num" 1 592 "int16" `274 
F B "memcpy" 1 592 "void(*int8 destination,*int8 source,int16 num)" `271  "String Prototypes:"
F N "toupper" 1 595 ""
V L "cvalue" 1 595 "int8" `276 
F B "toupper" 1 595 "int8(int8 cvalue)" `275 
F N "tolower" 1 596 ""
V L "cvalue" 1 596 "int8" `278 
F B "tolower" 1 596 "int8(int8 cvalue)" `277 
F N "sprintf" 1 597 ""
V L "string" 1 597 "*int8" `280 
V L "cstring" 1 597 "*int8" `281 
F B "sprintf" 1 597 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `279  "Data Manipulators Prototypes:"
F N "shift_left" 1 600 ""
V L "address" 1 600 "*int8" `284 
V L "bytes" 1 600 "int8" `285 
V L "value" 1 600 "int8" `286 
F B "shift_left" 1 600 "int8(*int8 address,int8 bytes,int8 value)" `283 
F N "shift_right" 1 601 ""
V L "address" 1 601 "*int8" `288 
V L "bytes" 1 601 "int8" `289 
V L "value" 1 601 "int8" `290 
F B "shift_right" 1 601 "int8(*int8 address,int8 bytes,int8 value)" `287 
F N "rotate_left" 1 602 ""
V L "address" 1 602 "*int8" `292 
V L "bytes" 1 602 "int8" `293 
F B "rotate_left" 1 602 "void(*int8 address,int8 bytes)" `291 
F N "rotate_right" 1 603 ""
V L "address" 1 603 "*int8" `295 
V L "bytes" 1 603 "int8" `296 
F B "rotate_right" 1 603 "void(*int8 address,int8 bytes)" `294 
F N "swap" 1 604 ""
V L "value" 1 604 "int8" `298 
F B "swap" 1 604 "void(int8 value)" `297 
F N "make8" 1 605 ""
V L "var" 1 605 "int16" `300 
V L "offset" 1 605 "int8" `301 
F B "make8" 1 605 "int8(int16 var,int8 offset)" `299 
F N "make8" 1 606 ""
V L "var" 1 606 "int32" `303 
V L "offset" 1 606 "int8" `304 
F B "make8" 1 606 "int8(int32 var,int8 offset)" `302 
F N "make16" 1 607 ""
V L "varhigh" 1 607 "int8" `306 
V L "varlow" 1 607 "int8" `307 
F B "make16" 1 607 "int16(int8 varhigh,int8 varlow)" `305 
F N "make32" 1 608 ""
V L "var1" 1 608 "int16" `309 
F B "make32" 1 608 "int32(int16 var1)" `308 
F N "make32" 1 609 ""
V L "var1" 1 609 "int16" `311 
V L "var2" 1 609 "int16" `312 
F B "make32" 1 609 "int32(int16 var1,int16 var2)" `310 
F N "make32" 1 610 ""
V L "var1" 1 610 "int16" `314 
V L "var2" 1 610 "int8" `315 
F B "make32" 1 610 "int32(int16 var1,int8 var2)" `313 
F N "make32" 1 611 ""
V L "var1" 1 611 "int16" `317 
V L "var2" 1 611 "int8" `318 
V L "var3" 1 611 "int8" `319 
F B "make32" 1 611 "int32(int16 var1,int8 var2,int8 var3)" `316 
F N "make32" 1 612 ""
V L "var1" 1 612 "int8" `321 
F B "make32" 1 612 "int32(int8 var1)" `320 
F N "make32" 1 613 ""
V L "var1" 1 613 "int8" `323 
V L "var2" 1 613 "int8" `324 
F B "make32" 1 613 "int32(int8 var1,int8 var2)" `322 
F N "make32" 1 614 ""
V L "var1" 1 614 "int8" `326 
V L "var2" 1 614 "int8" `327 
V L "var3" 1 614 "int8" `328 
F B "make32" 1 614 "int32(int8 var1,int8 var2,int8 var3)" `325 
F N "make32" 1 615 ""
V L "var1" 1 615 "int8" `330 
V L "var2" 1 615 "int8" `331 
V L "var3" 1 615 "int8" `332 
V L "var4" 1 615 "int8" `333 
F B "make32" 1 615 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `329 
F N "make32" 1 616 ""
V L "var1" 1 616 "int8" `335 
V L "var2" 1 616 "int16" `336 
F B "make32" 1 616 "int32(int8 var1,int16 var2)" `334 
F N "make32" 1 617 ""
V L "var1" 1 617 "int8" `338 
V L "var2" 1 617 "int16" `339 
V L "var3" 1 617 "int8" `340 
F B "make32" 1 617 "int32(int8 var1,int16 var2,int8 var3)" `337 
F N "make32" 1 618 ""
V L "var1" 1 618 "int8" `342 
V L "var2" 1 618 "int8" `343 
V L "var3" 1 618 "int16" `344 
F B "make32" 1 618 "int32(int8 var1,int8 var2,int16 var3)" `341 
F N "bit_set" 1 619 ""
V L "var" 1 619 "int8" `346 
V L "bit" 1 619 "int8" `347 
F B "bit_set" 1 619 "void(int8 var,int8 bit)" `345 
F N "bit_set" 1 620 ""
V L "var" 1 620 "int16" `349 
V L "bit" 1 620 "int8" `350 
F B "bit_set" 1 620 "void(int16 var,int8 bit)" `348 
F N "bit_set" 1 621 ""
V L "var" 1 621 "int32" `352 
V L "bit" 1 621 "int8" `353 
F B "bit_set" 1 621 "void(int32 var,int8 bit)" `351 
F N "bit_clear" 1 622 ""
V L "var" 1 622 "int8" `355 
V L "bit" 1 622 "int8" `356 
F B "bit_clear" 1 622 "void(int8 var,int8 bit)" `354 
F N "bit_clear" 1 623 ""
V L "var" 1 623 "int16" `358 
V L "bit" 1 623 "int8" `359 
F B "bit_clear" 1 623 "void(int16 var,int8 bit)" `357 
F N "bit_clear" 1 624 ""
V L "var" 1 624 "int32" `361 
V L "bit" 1 624 "int8" `362 
F B "bit_clear" 1 624 "void(int32 var,int8 bit)" `360 
F N "bit_test" 1 625 ""
V L "var" 1 625 "int8" `364 
V L "bit" 1 625 "int8" `365 
F B "bit_test" 1 625 "int8(int8 var,int8 bit)" `363 
F N "bit_test" 1 626 ""
V L "var" 1 626 "int16" `367 
V L "bit" 1 626 "int8" `368 
F B "bit_test" 1 626 "int8(int16 var,int8 bit)" `366 
F N "bit_test" 1 627 ""
V L "var" 1 627 "int32" `370 
V L "bit" 1 627 "int8" `371 
F B "bit_test" 1 627 "int8(int32 var,int8 bit)" `369  "#use delay() Prototypes:"
F N "delay_cycles" 1 630 ""
V L "count" 1 630 "int8" `373 
F B "delay_cycles" 1 630 "void(int8 count)" `372 
F N "delay_ms" 1 631 ""
V L "time" 1 631 "int16" `375 
F B "delay_ms" 1 631 "void(int16 time)" `374 
F N "delay_us" 1 632 ""
V L "time" 1 632 "int16" `377 
F B "delay_us" 1 632 "void(int16 time)" `376  "#use rs232() Prototypes:"
F N "putchar" 1 635 ""
V L "cdata" 1 635 "int8" `379 
F B "putchar" 1 635 "void(int8 cdata)" `378 
F N "putchar" 1 636 ""
V L "cdata" 1 636 "int8" `381 
V L "stream" 1 636 "int8" `382 
F B "putchar" 1 636 "void(int8 cdata,int8 stream)" `380 
F N "puts" 1 637 ""
V L "string" 1 637 "*int8" `384 
F B "puts" 1 637 "void(*int8 string)" `383 
F N "puts" 1 638 ""
V L "string" 1 638 "*int8" `386 
V L "stream" 1 638 "int8" `387 
F B "puts" 1 638 "void(*int8 string,int8 stream)" `385 
F N "getch" 1 639 ""
F B "getch" 1 639 "int8()" `388 
F N "getch" 1 640 ""
V L "stream" 1 640 "int8" `390 
F B "getch" 1 640 "int8(int8 stream)" `389 
F N "gets" 1 641 ""
V L "string" 1 641 "*int8" `392 
F B "gets" 1 641 "void(*int8 string)" `391 
F N "gets" 1 642 ""
V L "string" 1 642 "*int8" `394 
V L "stream" 1 642 "int8" `395 
F B "gets" 1 642 "void(*int8 string,int8 stream)" `393 
F N "kbhit" 1 643 ""
F B "kbhit" 1 643 "int8()" `396 
F N "kbhit" 1 644 ""
V L "stream" 1 644 "int8" `398 
F B "kbhit" 1 644 "int8(int8 stream)" `397 
F N "printf" 1 645 ""
V L "string" 1 645 "*int8" `400 
F B "printf" 1 645 "void(*int8 string,*int8 _VA_LIST)" `399 
F N "fprintf" 1 646 ""
V L "stream" 1 646 "int8" `403 
V L "string" 1 646 "*int8" `404 
F B "fprintf" 1 646 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `402 
F N "putc_send" 1 647 ""
F B "putc_send" 1 647 "void()" `406 
F N "fputc_send" 1 648 ""
V L "stream" 1 648 "int8" `408 
F B "fputc_send" 1 648 "void(int8 stream)" `407 
F N "rcv_buffer_full" 1 649 ""
F B "rcv_buffer_full" 1 649 "int8()" `409 
F N "rcv_buffer_full" 1 650 ""
V L "stream" 1 650 "int8" `411 
F B "rcv_buffer_full" 1 650 "int8(int8 stream)" `410 
F N "rcv_buffer_bytes" 1 651 ""
F B "rcv_buffer_bytes" 1 651 "int16()" `412 
F N "rcv_buffer_bytes" 1 652 ""
V L "stream" 1 652 "int8" `414 
F B "rcv_buffer_bytes" 1 652 "int16(int8 stream)" `413 
F N "tx_buffer_full" 1 653 ""
F B "tx_buffer_full" 1 653 "int8()" `415 
F N "tx_buffer_full" 1 654 ""
V L "stream" 1 654 "int8" `417 
F B "tx_buffer_full" 1 654 "int8(int8 stream)" `416 
F N "tx_buffer_bytes" 1 655 ""
F B "tx_buffer_bytes" 1 655 "int16()" `418 
F N "tx_buffer_bytes" 1 656 ""
V L "stream" 1 656 "int8" `420 
F B "tx_buffer_bytes" 1 656 "int16(int8 stream)" `419 
F N "linbus_header" 1 657 ""
V L "identifier" 1 657 "int8" `422 
F B "linbus_header" 1 657 "int8(int8 identifier)" `421 
F N "linbus_header" 1 658 ""
V L "stream" 1 658 "int8" `424 
V L "identifier" 1 658 "int8" `425 
F B "linbus_header" 1 658 "int8(int8 stream,int8 identifier)" `423 
F N "linbus_header_hit" 1 659 ""
F B "linbus_header_hit" 1 659 "int8()" `426 
F N "linbus_header_hit" 1 660 ""
V L "stream" 1 660 "int8" `428 
F B "linbus_header_hit" 1 660 "int8(int8 stream)" `427 
F N "linbus_header_get" 1 661 ""
F B "linbus_header_get" 1 661 "int8()" `429 
F N "linbus_header_get" 1 662 ""
V L "stream" 1 662 "int8" `431 
F B "linbus_header_get" 1 662 "int8(int8 stream)" `430 
F N "linbus_rx_response" 1 663 ""
V L "DataPtr" 1 663 "*int8" `433 
V L "count" 1 663 "int8" `434 
F B "linbus_rx_response" 1 663 "int8(*int8 DataPtr,int8 count)" `432 
F N "linbus_rx_response" 1 664 ""
V L "stream" 1 664 "int8" `436 
V L "DataPtr" 1 664 "*int8" `437 
V L "count" 1 664 "int8" `438 
F B "linbus_rx_response" 1 664 "int8(int8 stream,*int8 DataPtr,int8 count)" `435 
F N "linbus_tx_response" 1 665 ""
V L "DataPtr" 1 665 "*int8" `440 
V L "count" 1 665 "int8" `441 
F B "linbus_tx_response" 1 665 "void(*int8 DataPtr,int8 count)" `439 
F N "linbus_tx_response" 1 666 ""
V L "stream" 1 666 "int8" `443 
V L "DataPtr" 1 666 "*int8" `444 
V L "count" 1 666 "int8" `445 
F B "linbus_tx_response" 1 666 "void(int8 stream,*int8 DataPtr,int8 count)" `442 
F N "linbus_checksum_type" 1 667 ""
V L "type" 1 667 "int8" `447 
F B "linbus_checksum_type" 1 667 "void(int8 type)" `446 
F N "linbus_checksum_type" 1 668 ""
V L "stream" 1 668 "int8" `449 
V L "type" 1 668 "int8" `450 
F B "linbus_checksum_type" 1 668 "void(int8 stream,int8 type)" `448  "#use i2c() Prototypes:"
F N "i2c_read" 1 671 ""
F B "i2c_read" 1 671 "int8()" `451 
F N "i2c_read" 1 672 ""
V L "ack" 1 672 "int8" `453 
F B "i2c_read" 1 672 "int8(int8 ack)" `452 
F N "i2c_read" 1 673 ""
V L "stream" 1 673 "int8" `455 
V L "ack" 1 673 "int8" `456 
F B "i2c_read" 1 673 "int8(int8 stream,int8 ack)" `454 
F N "i2c_write" 1 674 ""
V L "data" 1 674 "int8" `458 
F B "i2c_write" 1 674 "int8(int8 data)" `457 
F N "i2c_write" 1 675 ""
V L "stream" 1 675 "int8" `460 
V L "data" 1 675 "int8" `461 
F B "i2c_write" 1 675 "int8(int8 stream,int8 data)" `459 
F N "i2c_start" 1 676 ""
F B "i2c_start" 1 676 "void()" `462 
F N "i2c_start" 1 677 ""
V L "stream" 1 677 "int8" `464 
F B "i2c_start" 1 677 "void(int8 stream)" `463 
F N "i2c_start" 1 678 ""
V L "stream" 1 678 "int8" `466 
V L "restart" 1 678 "int8" `467 
F B "i2c_start" 1 678 "void(int8 stream,int8 restart)" `465 
F N "i2c_stop" 1 679 ""
F B "i2c_stop" 1 679 "void()" `468 
F N "i2c_stop" 1 680 ""
V L "stream" 1 680 "int8" `470 
F B "i2c_stop" 1 680 "void(int8 stream)" `469 
F N "i2c_isr_state" 1 681 ""
F B "i2c_isr_state" 1 681 "int8()" `471 
F N "i2c_slaveaddr" 1 682 ""
V L "addr" 1 682 "int8" `473 
F B "i2c_slaveaddr" 1 682 "void(int8 addr)" `472 
F N "i2c_slaveaddr" 1 683 ""
V L "stream" 1 683 "int8" `475 
V L "addr" 1 683 "int8" `476 
F B "i2c_slaveaddr" 1 683 "void(int8 stream,int8 addr)" `474 
F N "i2c_poll" 1 684 ""
F B "i2c_poll" 1 684 "int8()" `477 
F N "i2c_poll" 1 685 ""
V L "stream" 1 685 "int8" `479 
F B "i2c_poll" 1 685 "int8(int8 stream)" `478 
F N "i2c_init" 1 686 ""
V L "baud" 1 686 "int32" `481 
F B "i2c_init" 1 686 "void(int32 baud)" `480 
F N "i2c_init" 1 687 ""
V L "stream" 1 687 "int8" `483 
V L "baud" 1 687 "int32" `484 
F B "i2c_init" 1 687 "void(int8 stream,int32 baud)" `482 
F N "i2c_transfer" 1 688 ""
V L "address" 1 688 "int8" `486 
V L "wData" 1 688 "*int8" `487 
V L "wCount" 1 688 "int8" `488 
F B "i2c_transfer" 1 688 "int8(int8 address,*int8 wData,int8 wCount)" `485 
F N "i2c_transfer" 1 689 ""
V L "address" 1 689 "int8" `490 
V L "wData" 1 689 "*int8" `491 
V L "wCount" 1 689 "int8" `492 
V L "rData" 1 689 "*int8" `493 
V L "rCount" 1 689 "*int8" `494 
F B "i2c_transfer" 1 689 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `489 
F N "i2c_transfer" 1 690 ""
V L "stream" 1 690 "int8" `496 
V L "address" 1 690 "int8" `497 
V L "wData" 1 690 "*int8" `498 
V L "wCount" 1 690 "int8" `499 
F B "i2c_transfer" 1 690 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `495 
F N "i2c_transfer" 1 691 ""
V L "stream" 1 691 "int8" `501 
V L "address" 1 691 "int8" `502 
V L "wData" 1 691 "*int8" `503 
V L "wCount" 1 691 "int8" `504 
V L "rData" 1 691 "*int8" `505 
V L "rCount" 1 691 "*int8" `506 
F B "i2c_transfer" 1 691 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `500 
F N "i2c_transfer_out" 1 692 ""
V L "address" 1 692 "int8" `508 
V L "wData" 1 692 "*int8" `509 
V L "wCount" 1 692 "int8" `510 
F B "i2c_transfer_out" 1 692 "int8(int8 address,*int8 wData,int8 wCount)" `507 
F N "i2c_transfer_out" 1 693 ""
V L "stream" 1 693 "int8" `512 
V L "address" 1 693 "int8" `513 
V L "wData" 1 693 "*int8" `514 
V L "wCount" 1 693 "int8" `515 
F B "i2c_transfer_out" 1 693 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `511 
F N "i2c_transfer_in" 1 694 ""
V L "address" 1 694 "int8" `517 
V L "rData" 1 694 "*int8" `518 
V L "rCount" 1 694 "int8" `519 
F B "i2c_transfer_in" 1 694 "int8(int8 address,*int8 rData,int8 rCount)" `516 
F N "i2c_transfer_in" 1 695 ""
V L "stream" 1 695 "int8" `521 
V L "address" 1 695 "int8" `522 
V L "rData" 1 695 "*int8" `523 
V L "rCount" 1 695 "int8" `524 
F B "i2c_transfer_in" 1 695 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `520  "#use spi() Prototypes:"
F N "spi_xfer" 1 698 ""
F B "spi_xfer" 1 698 "int8()" `525 
F N "spi_xfer" 1 699 ""
f G "spi_xfer" 1 699 "int16()" `526 
F N "spi_xfer" 1 700 ""
f G "spi_xfer" 1 700 "int32()" `526 
F N "spi_xfer" 1 701 ""
V L "data" 1 701 "int8" `527 
F B "spi_xfer" 1 701 "int8(int8 data)" `526 
F N "spi_xfer" 1 702 ""
V L "data" 1 702 "int16" `529 
F B "spi_xfer" 1 702 "int16(int16 data)" `528 
F N "spi_xfer" 1 703 ""
V L "data" 1 703 "int32" `531 
F B "spi_xfer" 1 703 "int32(int32 data)" `530 
F N "spi_xfer" 1 704 ""
V L "stream" 1 704 "int8" `533 
V L "data" 1 704 "int8" `534 
F B "spi_xfer" 1 704 "int8(int8 stream,int8 data)" `532 
F N "spi_xfer" 1 705 ""
V L "stream" 1 705 "int8" `536 
V L "data" 1 705 "int16" `537 
F B "spi_xfer" 1 705 "int16(int8 stream,int16 data)" `535 
F N "spi_xfer" 1 706 ""
V L "stream" 1 706 "int8" `539 
V L "data" 1 706 "int32" `540 
F B "spi_xfer" 1 706 "int32(int8 stream,int32 data)" `538 
F N "spi_xfer" 1 707 ""
V L "stream" 1 707 "int8" `542 
V L "data" 1 707 "int8" `543 
V L "bits" 1 707 "int8" `544 
F B "spi_xfer" 1 707 "int8(int8 stream,int8 data,int8 bits)" `541 
F N "spi_xfer" 1 708 ""
V L "stream" 1 708 "int8" `546 
V L "data" 1 708 "int16" `547 
V L "bits" 1 708 "int8" `548 
F B "spi_xfer" 1 708 "int16(int8 stream,int16 data,int8 bits)" `545 
F N "spi_xfer" 1 709 ""
V L "stream" 1 709 "int8" `550 
V L "data" 1 709 "int32" `551 
V L "bits" 1 709 "int8" `552 
F B "spi_xfer" 1 709 "int32(int8 stream,int32 data,int8 bits)" `549 
F N "spi_init" 1 710 ""
V L "baud" 1 710 "int32" `554 
F B "spi_init" 1 710 "void(int32 baud)" `553 
F N "spi_init" 1 711 ""
V L "stream" 1 711 "int8" `556 
V L "baud" 1 711 "int32" `557 
F B "spi_init" 1 711 "void(int8 stream,int32 baud)" `555 
F N "spi_speed" 1 712 ""
V L "baud" 1 712 "int32" `559 
F B "spi_speed" 1 712 "void(int32 baud)" `558 
F N "spi_speed" 1 713 ""
V L "stream" 1 713 "int8" `561 
V L "baud" 1 713 "int32" `562 
F B "spi_speed" 1 713 "void(int8 stream,int32 baud)" `560 
F N "spi_speed" 1 714 ""
V L "stream" 1 714 "int8" `564 
V L "baud" 1 714 "int32" `565 
V L "clock" 1 714 "int32" `566 
F B "spi_speed" 1 714 "void(int8 stream,int32 baud,int32 clock)" `563 
F N "spi_prewrite" 1 715 ""
V L "data" 1 715 "int8" `568 
F B "spi_prewrite" 1 715 "void(int8 data)" `567 
F N "spi_prewrite" 1 716 ""
V L "data" 1 716 "int16" `570 
F B "spi_prewrite" 1 716 "void(int16 data)" `569 
F N "spi_prewrite" 1 717 ""
V L "data" 1 717 "int32" `572 
F B "spi_prewrite" 1 717 "void(int32 data)" `571 
F N "spi_prewrite" 1 718 ""
V L "??65535" 1 718 "int8" `574 
V L "data" 1 718 "int8" `575 
F B "spi_prewrite" 1 718 "void(int8 ,int8 data)" `573 
F N "spi_prewrite" 1 719 ""
V L "??65535" 1 719 "int8" `577 
V L "data" 1 719 "int16" `578 
F B "spi_prewrite" 1 719 "void(int8 ,int16 data)" `576 
F N "spi_prewrite" 1 720 ""
V L "??65535" 1 720 "int8" `580 
V L "data" 1 720 "int32" `581 
F B "spi_prewrite" 1 720 "void(int8 ,int32 data)" `579 
F N "spi_xfer_in" 1 721 ""
F B "spi_xfer_in" 1 721 "int8()" `582 
F N "spi_xfer_in" 1 722 ""
f G "spi_xfer_in" 1 722 "int16()" `583 
F N "spi_xfer_in" 1 723 ""
f G "spi_xfer_in" 1 723 "int32()" `583 
F N "spi_xfer_in" 1 724 ""
V L "bits" 1 724 "int8" `584 
F B "spi_xfer_in" 1 724 "int8(int8 bits)" `583 
F N "spi_xfer_in" 1 725 ""
V L "bits" 1 725 "int8" `586 
f G "spi_xfer_in" 1 725 "int16(int8 bits)" `585 
F N "spi_xfer_in" 1 726 ""
V L "bits" 1 726 "int8" `586 
f G "spi_xfer_in" 1 726 "int32(int8 bits)" `585 
F N "spi_xfer_in" 1 727 ""
V L "stream" 1 727 "int8" `586 
V L "bits" 1 727 "int8" `587 
F B "spi_xfer_in" 1 727 "int8(int8 stream,int8 bits)" `585 
F N "spi_xfer_in" 1 728 ""
V L "stream" 1 728 "int8" `586 
V L "bits" 1 728 "int8" `590 
f G "spi_xfer_in" 1 728 "int16(int8 stream,int8 bits)" `588 
F N "spi_xfer_in" 1 729 ""
V L "stream" 1 729 "int8" `586 
V L "bits" 1 729 "int8" `590 
f G "spi_xfer_in" 1 729 "int32(int8 stream,int8 bits)" `588 
F N "spi_transfer" 1 730 ""
V L "wData" 1 730 "*int8" `589 
V L "rData" 1 730 "*int8" `590 
V L "count" 1 730 "int16" `591 
F B "spi_transfer" 1 730 "void(*int8 wData,*int8 rData,int16 count)" `588 
F N "spi_transfer" 1 731 ""
V L "stream" 1 731 "int8" `593 
V L "wData" 1 731 "*int8" `594 
V L "rData" 1 731 "*int8" `595 
V L "count" 1 731 "int16" `596 
F B "spi_transfer" 1 731 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `592 
F N "spi_transfer_write" 1 732 ""
V L "wData" 1 732 "*int8" `598 
V L "count" 1 732 "int16" `599 
F B "spi_transfer_write" 1 732 "void(*int8 wData,int16 count)" `597 
F N "spi_transfer_write" 1 733 ""
V L "stream" 1 733 "int8" `601 
V L "wData" 1 733 "*int8" `602 
V L "count" 1 733 "int16" `603 
F B "spi_transfer_write" 1 733 "void(int8 stream,*int8 wData,int16 count)" `600 
F N "spi_transfer_read" 1 734 ""
V L "rData" 1 734 "*int8" `605 
V L "count" 1 734 "int16" `606 
F B "spi_transfer_read" 1 734 "void(*int8 rData,int16 count)" `604 
F N "spi_transfer_read" 1 735 ""
V L "stream" 1 735 "int8" `608 
V L "rData" 1 735 "*int8" `609 
V L "count" 1 735 "int16" `610 
F B "spi_transfer_read" 1 735 "void(int8 stream,*int8 rData,int16 count)" `607  "#use rtos() Prototypes:"
F N "rtos_run" 1 738 ""
F B "rtos_run" 1 738 "void()" `611 
F N "rtos_yield" 1 739 ""
F B "rtos_yield" 1 739 "void()" `612 
F N "rtos_enable" 1 740 ""
V L "task" 1 740 "int8" `614 
F B "rtos_enable" 1 740 "void(int8 task)" `613 
F N "rtos_disable" 1 741 ""
V L "task" 1 741 "int8" `616 
F B "rtos_disable" 1 741 "void(int8 task)" `615 
F N "rtos_terminate" 1 742 ""
F B "rtos_terminate" 1 742 "void()" `617 
F N "rtos_await" 1 743 ""
V L "flag" 1 743 "int8" `619 
F B "rtos_await" 1 743 "void(int8 flag)" `618 
F N "rtos_wait" 1 744 ""
V L "sem" 1 744 "int8" `621 
F B "rtos_wait" 1 744 "void(int8 sem)" `620 
F N "rtos_signal" 1 745 ""
V L "sem" 1 745 "int8" `623 
F B "rtos_signal" 1 745 "void(int8 sem)" `622 
F N "rtos_msg_send" 1 746 ""
V L "task" 1 746 "int8" `625 
V L "msg" 1 746 "int8" `626 
F B "rtos_msg_send" 1 746 "void(int8 task,int8 msg)" `624 
F N "rtos_msg_read" 1 747 ""
F B "rtos_msg_read" 1 747 "int8()" `627 
F N "rtos_msg_poll" 1 748 ""
F B "rtos_msg_poll" 1 748 "int8()" `628 
F N "rtos_overrun" 1 749 ""
V L "task" 1 749 "int8" `630 
F B "rtos_overrun" 1 749 "int8(int8 task)" `629 
F N "rtos_stats" 1 750 ""
V L "task" 1 750 "int8" `632 
V L "stat" 1 750 "*int8" `633 
F B "rtos_stats" 1 750 "void(int8 task,*int8 stat)" `631  "#use timer() Prototypes:"
F N "get_ticks" 1 753 ""
F B "get_ticks" 1 753 "int8()" `634 
F N "get_ticks" 1 754 ""
f G "get_ticks" 1 754 "int16()" `635 
F N "get_ticks" 1 755 ""
f G "get_ticks" 1 755 "int32()" `635 
F N "get_ticks" 1 756 ""
V L "stream" 1 756 "int8" `636 
F B "get_ticks" 1 756 "int8(int8 stream)" `635 
F N "get_ticks" 1 757 ""
V L "stream" 1 757 "int8" `638 
f G "get_ticks" 1 757 "int16(int8 stream)" `637 
F N "get_ticks" 1 758 ""
V L "stream" 1 758 "int8" `638 
f G "get_ticks" 1 758 "int32(int8 stream)" `637 
F N "set_ticks" 1 759 ""
V L "value" 1 759 "int8" `638 
F B "set_ticks" 1 759 "void(int8 value)" `637 
F N "set_ticks" 1 760 ""
V L "value" 1 760 "int16" `640 
F B "set_ticks" 1 760 "void(int16 value)" `639 
F N "set_ticks" 1 761 ""
V L "value" 1 761 "int32" `642 
F B "set_ticks" 1 761 "void(int32 value)" `641 
F N "set_ticks" 1 762 ""
V L "stream" 1 762 "int8" `644 
V L "value" 1 762 "int8" `645 
F B "set_ticks" 1 762 "void(int8 stream,int8 value)" `643 
F N "set_ticks" 1 763 ""
V L "stream" 1 763 "int8" `647 
V L "value" 1 763 "int16" `648 
F B "set_ticks" 1 763 "void(int8 stream,int16 value)" `646 
F N "set_ticks" 1 764 ""
V L "stream" 1 764 "int8" `650 
V L "value" 1 764 "int32" `651 
F B "set_ticks" 1 764 "void(int8 stream,int32 value)" `649  "#use pwm() Prototypes:"
F N "pwm_on" 1 767 ""
F B "pwm_on" 1 767 "void()" `652 
F N "pwm_on" 1 768 ""
V L "stream" 1 768 "int8" `654 
F B "pwm_on" 1 768 "void(int8 stream)" `653 
F N "pwm_off" 1 769 ""
F B "pwm_off" 1 769 "void()" `655 
F N "pwm_off" 1 770 ""
V L "stream" 1 770 "int8" `657 
F B "pwm_off" 1 770 "void(int8 stream)" `656 
F N "pwm_set_duty" 1 771 ""
V L "duty" 1 771 "int16" `659 
F B "pwm_set_duty" 1 771 "void(int16 duty)" `658 
F N "pwm_set_duty" 1 772 ""
V L "stream" 1 772 "int8" `661 
V L "duty" 1 772 "int16" `662 
F B "pwm_set_duty" 1 772 "void(int8 stream,int16 duty)" `660 
F N "pwm_set_duty_percent" 1 773 ""
V L "percent" 1 773 "int16" `664 
F B "pwm_set_duty_percent" 1 773 "void(int16 percent)" `663 
F N "pwm_set_duty_percent" 1 774 ""
V L "stream" 1 774 "int8" `666 
V L "percent" 1 774 "int16" `667 
F B "pwm_set_duty_percent" 1 774 "void(int8 stream,int16 percent)" `665 
F N "pwm_set_frequency" 1 775 ""
V L "frequency" 1 775 "int32" `669 
F B "pwm_set_frequency" 1 775 "void(int32 frequency)" `668 
F N "pwm_set_frequency" 1 776 ""
V L "stream" 1 776 "int8" `671 
V L "frequency" 1 776 "int32" `672 
F B "pwm_set_frequency" 1 776 "void(int8 stream,int32 frequency)" `670 
F N "pwm_get_duty_period" 1 777 ""
F B "pwm_get_duty_period" 1 777 "int16()" `673 
F N "pwm_get_duty_period" 1 778 ""
V L "stream" 1 778 "int8" `675 
F B "pwm_get_duty_period" 1 778 "int16(int8 stream)" `674  "#use capture() Prototypes:"
F N "get_capture_time" 1 781 ""
F B "get_capture_time" 1 781 "int16()" `676 
F N "get_capture_time" 1 782 ""
V L "stream" 1 782 "int8" `678 
F B "get_capture_time" 1 782 "int16(int8 stream)" `677 
F N "get_capture_event" 1 783 ""
F B "get_capture_event" 1 783 "int8()" `679 
F N "get_capture_event" 1 784 ""
V L "stream" 1 784 "int8" `681 
F B "get_capture_event" 1 784 "int8(int8 stream)" `680  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
F N "goto_address" 1 797 ""
V L "address" 1 797 "int32" `683 
F B "goto_address" 1 797 "void(int32 address)" `682 
F N "label_address" 1 798 ""
V L "label" 1 798 "int32" `685 
F B "label_address" 1 798 "int32(int32 label)" `684  "Program Memory Read Prototypes:"
F N "read_program_memory" 1 801 ""
V L "address" 1 801 "int32" `687 
V L "DataPtr" 1 801 "*int8" `688 
V L "count" 1 801 "int16" `689 
F B "read_program_memory" 1 801 "void(int32 address,*int8 DataPtr,int16 count)" `686 
F N "read_program_eeprom" 1 802 ""
V L "address" 1 802 "int32" `691 
F B "read_program_eeprom" 1 802 "int16(int32 address)" `690  "Program Memory Write Prototypes:"
F N "erase_program_eeprom" 1 805 ""
V L "address" 1 805 "int32" `693 
F B "erase_program_eeprom" 1 805 "void(int32 address)" `692 
F N "write_program_memory" 1 806 ""
V L "address" 1 806 "int32" `695 
V L "DataPtr" 1 806 "*int8" `696 
V L "count" 1 806 "int16" `697 
F B "write_program_memory" 1 806 "void(int32 address,*int8 DataPtr,int16 count)" `694 
F N "write_program_eeprom" 1 807 ""
V L "address" 1 807 "int32" `699 
V L "data" 1 807 "int16" `700 
F B "write_program_eeprom" 1 807 "void(int32 address,int16 data)" `698  "EEPROM Prototypes:"
D G "__EEADDRESS__" 1 812 "unsigned int16"
F N "read_eeprom" 1 817 ""
V L "address" 1 817 "int16" `702 
F B "read_eeprom" 1 817 "int8(int16 address)" `701 
F N "write_eeprom" 1 818 ""
V L "address" 1 818 "int16" `704 
V L "value" 1 818 "int8" `705 
F B "write_eeprom" 1 818 "void(int16 address,int8 value)" `703  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
F N "enable_interrupts" 1 825 ""
V L "interrupt" 1 825 "int32" `707 
F B "enable_interrupts" 1 825 "void(int32 interrupt)" `706 
F N "disable_interrupts" 1 826 ""
V L "interrupt" 1 826 "int32" `709 
F B "disable_interrupts" 1 826 "void(int32 interrupt)" `708 
F N "clear_interrupt" 1 827 ""
V L "interrupt" 1 827 "int32" `711 
F B "clear_interrupt" 1 827 "void(int32 interrupt)" `710 
F N "interrupt_active" 1 828 ""
V L "interrupt" 1 828 "int32" `713 
F B "interrupt_active" 1 828 "int8(int32 interrupt)" `712 
F N "interrupt_enabled" 1 829 ""
V L "interrupt" 1 829 "int32" `715 
F B "interrupt_enabled" 1 829 "int8(int32 interrupt)" `714 
F N "ext_int_edge" 1 830 ""
V L "source" 1 830 "int8" `717 
V L "edge" 1 830 "int8" `718 
F B "ext_int_edge" 1 830 "void(int8 source,int8 edge)" `716 
F N "jump_to_isr" 1 831 ""
V L "address" 1 831 "int16" `720 
F B "jump_to_isr" 1 831 "void(int16 address)" `719  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 1 833 "0x40"
D G "H_TO_L" 1 834 "0"
D G "GLOBAL" 1 836 "0xF2C0"
D G "PERIPH" 1 837 "0xF240"
D G "INT_RTCC" 1 838 "0x00F220"
D G "INT_TIMER0" 1 839 "0x00F220"
D G "INT_TIMER1" 1 840 "0x009D01"
D G "INT_TIMER2" 1 841 "0x009D02"
D G "INT_TIMER3" 1 842 "0x00A002"
D G "INT_EXT_L2H" 1 843 "0x5000F210"
D G "INT_EXT_H2L" 1 844 "0x6000F210"
D G "INT_EXT" 1 845 "0x00F210"
D G "INT_EXT1_L2H" 1 846 "0x5001F008"
D G "INT_EXT1_H2L" 1 847 "0x6001F008"
D G "INT_EXT1" 1 848 "0x00F008"
D G "INT_EXT2_L2H" 1 849 "0x5002F010"
D G "INT_EXT2_H2L" 1 850 "0x6002F010"
D G "INT_EXT2" 1 851 "0x00F010"
D G "INT_RB" 1 852 "0x01FFF208"
D G "INT_AD" 1 853 "0x009D40"
D G "INT_RDA" 1 854 "0x009D20"
D G "INT_TBE" 1 855 "0x009D10"
D G "INT_SSP" 1 856 "0x009D08"
D G "INT_CCP1" 1 857 "0x009D04"
D G "INT_CCP2" 1 858 "0x00A001"
D G "INT_BUSCOL" 1 859 "0x00A008"
D G "INT_LOWVOLT" 1 860 "0x00A004"
D G "INT_COMP" 1 861 "0x00A040"
D G "INT_EEPROM" 1 862 "0x00A010"
D G "INT_OSCF" 1 863 "0x00A080"
D G "INT_COMP2" 1 864 "0x00A020"
D G "INT_RB0" 1 865 "0x101F208"
D G "INT_RB1" 1 866 "0x102F208"
D G "INT_RB2" 1 867 "0x104F208"
D G "INT_RB3" 1 868 "0x108F208"
D G "INT_RB4" 1 869 "0x110F208"
D G "INT_RB5" 1 870 "0x120F208"
D G "INT_RB6" 1 871 "0x140F208"
D G "INT_RB7" 1 872 "0x180F208"
D G "_STDLIB" 2 13 ""
D G "RAND_MAX" 2 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 2 26 "1"
T G "div_t" 2 34 "{sint8 quot,sint8 rem}" `724 
T G "ldiv_t" 2 39 "{sint16 quot,sint16 rem}" `728  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 3 13 ""
D G "ptrdiff_t" 3 18 "unsigned int16"
D G "size_t" 3 24 "unsigned int16"
D G "wchar_t" 3 26 "unsigned char"
D G "NULL" 3 27 "0"
D G "offsetof" 3 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 2 44 2 "FUNCTION"
C L "jump_to_isr" 2 47 1 "*"
C L "jump_to_isr" 2 47 1 "*"
F N "atoi" 2 51 ""
V L "s" 2 51 "*int8" `730 
f G "atoi" 2 51 "sint8(*int8 s)" `729  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 2 59 ""
V L "s" 2 59 "*int8" `732 
f G "atoi32" 2 59 "sint32(*int8 s)" `731  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 2 47 2 "FUNCTION"
F N "itoa" 2 80 ""
V L "num" 2 80 "sint32" `734 
V L "base" 2 80 "int8" `735 
V L "s" 2 80 "*int8" `736 
f G "itoa" 2 80 "*int8(sint32 num,int8 base,*int8 s)" `733  "Standard template: signed int16  atol(char * s)"
C L "itoa" 2 82 1 "*"
C L "itoa" 2 82 1 "*"
F N "atol" 2 86 ""
V L "s" 2 86 "*int8" `738 
f G "atol" 2 86 "sint16(*int8 s)" `737  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
F N "strtol" 2 94 ""
V L "s" 2 94 "*int8" `740 
V L "endptr" 2 94 "*int8" `741 
V L "base" 2 94 "sint8" `742 
f G "strtol" 2 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `739  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
F N "strtoul" 2 102 ""
V L "s" 2 102 "*int8" `744 
V L "endptr" 2 102 "*int8" `745 
V L "base" 2 102 "sint8" `746 
f G "strtoul" 2 102 "int16(*int8 s,*int8 endptr,sint8 base)" `743  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 2 96 2 "FUNCTION"
C L "strtoul" 2 104 1 "*"
C L "strtoul" 2 104 1 "*"
C L "strtoul" 2 104 1 "*"
F N "strtof" 2 111 ""
V L "s" 2 111 "*int8" `748 
V L "endptr" 2 111 "??0 *" `749 
f G "strtof" 2 111 "float(*int8 s,??0 * endptr)" `747  "provided for compatibility"
D G "strtof48" 2 117 "(s,e) strtof(s, e)"
D G "strtod" 2 118 "(s,e) strtof(s, e)"
C L "strtof" 2 104 1 "FUNCTION"
C L "strtof" 2 121 1 "*"
D G "atof" 2 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 2 121 1 "FUNCTION"
C L "strtof" 2 144 1 "*"
C L "strtof" 2 144 1 "*"
C L "strtof" 2 144 1 "*"
F N "atoe" 2 150 ""
V L "s" 2 150 "*int8" `752 
f G "atoe" 2 150 "float(*int8 s)" `751  "Pseudo-random sequence generation functions"
C L "atoe" 2 144 1 "FUNCTION"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
F N "rand" 2 170 ""
f G "rand" 2 170 "int16()" `753  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
F N "srand" 2 192 ""
V L "seed" 2 192 "int32" `755 
f G "srand" 2 192 "void(int32 seed)" `754  "Memory management functions"
C L "srand" 2 172 3 "FUNCTION"
F N "system" 2 206 ""
V L "string" 2 206 "*int8" `757 
f G "system" 2 206 "sint8(*int8 string)" `756  "Searching and sorting utilities"
C L "system" 2 172 1 "FUNCTION"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 4 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
D G "labs" 2 250 "abs"
F N "div" 2 252 ""
V L "numer" 2 252 "sint8" `759 
V L "denom" 2 252 "sint8" `760 
f G "div" 2 252 "div_t(sint8 numer,sint8 denom)" `758 
F N "ldiv" 2 253 ""
V L "numer" 2 253 "sint16" `762 
V L "denom" 2 253 "sint16" `763 
f G "ldiv" 2 253 "ldiv_t(sint16 numer,sint16 denom)" `761  "Multibyte character functions"
C L "ldiv" 2 230 4 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
D G "_STRING" 4 12 ""
C L "ldiv" 3 2 7 "FUNCTION"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 4 19 10 "FUNCTION"
F N "memmove" 4 34 ""
V L "s1" 4 34 "*void" `765 
V L "s2" 4 34 "*void" `766 
V L "n" 4 34 "int16" `767 
F G "memmove" 4 35 "*int8(*void s1,*void s2,int16 n)" `764 
V L "sc1" 4 36 "*int8" `768 
V L "sc2" 4 37 "*int8" `769 
D G "strcopy" 4 54 "strcpy"
C L "strncpy" 4 19 4 "FUNCTION"
F N "strncpy" 4 61 ""
V L "s1" 4 61 "*int8" `771 
V L "s2" 4 61 "*int8" `772 
V L "n" 4 61 "int16" `773 
F G "strncpy" 4 62 "*int8(*int8 s1,*int8 s2,int16 n)" `770 
V L "s" 4 63 "*int8" `774 
C L "strcat" 4 19 3 "FUNCTION"
F N "strcat" 4 78 ""
V L "s1" 4 78 "*int8" `776 
V L "s2" 4 78 "*int8" `777 
F G "strcat" 4 79 "*int8(*int8 s1,*int8 s2)" `775 
V L "s" 4 80 "*int8" `778 
C L "strncat" 4 19 2 "FUNCTION"
F N "strncat" 4 96 ""
V L "s1" 4 96 "*int8" `780 
V L "s2" 4 96 "*int8" `781 
V L "n" 4 96 "int16" `782 
F G "strncat" 4 97 "*int8(*int8 s1,*int8 s2,int16 n)" `779 
V L "s" 4 98 "*int8" `783 
C L "memcmp" 4 19 3 "FUNCTION"
F N "memcmp" 4 120 ""
V L "s1" 4 120 "*void" `785 
V L "s2" 4 120 "*void" `786 
V L "n" 4 120 "int16" `787 
F G "memcmp" 4 121 "sint8(*void s1,*void s2,int16 n)" `784 
V L "su1" 4 122 "*int8" `788 
V L "su2" 4 122 "*int8" `789 
C L "strcmp" 4 19 2 "FUNCTION"
F N "strcmp" 4 134 ""
V L "s1" 4 134 "*int8" `791 
V L "s2" 4 134 "*int8" `792 
F G "strcmp" 4 135 "sint8(*int8 s1,*int8 s2)" `790 
C L "strcoll" 4 19 2 "FUNCTION"
F N "strcoll" 4 144 ""
V L "s1" 4 144 "*int8" `794 
V L "s2" 4 144 "*int8" `795 
F G "strcoll" 4 145 "sint8(*int8 s1,*int8 s2)" `793 
C L "strncmp" 4 19 4 "FUNCTION"
F N "strncmp" 4 157 ""
V L "s1" 4 157 "*int8" `797 
V L "s2" 4 157 "*int8" `798 
V L "n" 4 157 "int16" `799 
F G "strncmp" 4 158 "sint8(*int8 s1,*int8 s2,int16 n)" `796 
C L "strxfrm" 4 19 4 "FUNCTION"
F N "strxfrm" 4 170 ""
V L "s1" 4 170 "*int8" `801 
V L "s2" 4 170 "*int8" `802 
V L "n" 4 170 "int16" `803 
F G "strxfrm" 4 171 "int16(*int8 s1,*int8 s2,int16 n)" `800 
V L "c" 4 172 "int8" `804 
V L "n1" 4 173 "int16" `805 
C L "strxfrm" 4 19 1 "FUNCTION"
C L "memchr" 4 19 3 "FUNCTION"
F N "memchr" 4 201 ""
V L "s" 4 201 "*void" `807 
V L "c" 4 201 "int8" `808 
V L "n" 4 201 "int16" `809 
F G "memchr" 4 202 "*int8(*void s,int8 c,int16 n)" `806 
V L "uc" 4 203 "int8" `810 
V L "su" 4 204 "*int8" `811 
C L "strchr" 4 19 2 "FUNCTION"
F N "strchr" 4 215 ""
V L "s" 4 215 "*int8" `813 
V L "c" 4 215 "int8" `814 
F G "strchr" 4 216 "*int8(*int8 s,int8 c)" `812 
C L "strcspn" 4 19 4 "FUNCTION"
F N "strcspn" 4 227 ""
V L "s1" 4 227 "*int8" `816 
V L "s2" 4 227 "*int8" `817 
F G "strcspn" 4 228 "int16(*int8 s1,*int8 s2)" `815 
V L "sc1" 4 229 "*int8" `818 
V L "sc2" 4 229 "*int8" `819 
C L "strpbrk" 4 19 4 "FUNCTION"
F N "strpbrk" 4 242 ""
V L "s1" 4 242 "*int8" `821 
V L "s2" 4 242 "*int8" `822 
F G "strpbrk" 4 243 "*int8(*int8 s1,*int8 s2)" `820 
V L "sc1" 4 244 "*int8" `823 
V L "sc2" 4 244 "*int8" `824 
C L "strrchr" 4 19 2 "FUNCTION"
F N "strrchr" 4 257 ""
V L "s" 4 257 "*int8" `826 
V L "c" 4 257 "int8" `827 
F G "strrchr" 4 258 "*int8(*int8 s,int8 c)" `825 
V L "p" 4 259 "*int8" `828 
C L "strspn" 4 19 2 "FUNCTION"
F N "strspn" 4 272 ""
V L "s1" 4 272 "*int8" `830 
V L "s2" 4 272 "*int8" `831 
F G "strspn" 4 273 "int16(*int8 s1,*int8 s2)" `829 
V L "sc1" 4 274 "*int8" `832 
V L "sc2" 4 274 "*int8" `833 
C L "strstr" 4 19 6 "FUNCTION"
F N "strstr" 4 291 ""
V L "s1" 4 291 "*int8" `835 
V L "s2" 4 291 "*int8" `836 
F G "strstr" 4 292 "*int8(*int8 s1,*int8 s2)" `834 
V L "s" 4 293 "*int8" `837 
V L "t" 4 293 "*int8" `838 
C L "strlen" 4 19 2 "FUNCTION"
F N "strlen" 4 318 ""
V L "s" 4 318 "*int8" `840 
F G "strlen" 4 319 "int16(*int8 s)" `839 
V L "sc" 4 320 "*int8" `841 
C L "strtok" 4 19 13 "FUNCTION"
F N "strtok" 4 341 ""
V L "s1" 4 341 "*int8" `843 
V L "s2" 4 341 "*int8" `844 
F G "strtok" 4 342 "*int8(*int8 s1,*int8 s2)" `842 
V L "beg" 4 343 "*int8" `845 
V L "end" 4 343 "*int8" `846 
V L "save" 4 344 "*int8" `847 
C L "stricmp" 4 19 6 "FUNCTION"
F N "stricmp" 4 392 ""
V L "s1" 4 392 "*int8" `849 
V L "s2" 4 392 "*int8" `850 
F G "stricmp" 4 393 "sint8(*int8 s1,*int8 s2)" `848 
C L "strlwr" 4 19 3 "FUNCTION"
F N "strlwr" 4 406 ""
V L "s" 4 406 "*int8" `854 
F G "strlwr" 4 407 "*int8(*int8 s)" `853 
V L "p" 4 408 "*int8" `855 
C L "strupr" 4 19 3 "FUNCTION"
F N "strupr" 4 420 ""
V L "s" 4 420 "*int8" `857 
F G "strupr" 4 421 "*int8(*int8 s)" `856 
V L "p" 4 422 "*int8" `858 
F N "div" 2 275 ""
V L "numer" 2 275 "sint8" `759 
V L "denom" 2 275 "sint8" `861 
F G "div" 2 276 "div_t(sint8 numer,sint8 denom)" `758 
V L "val" 2 277 "div_t" `859 
F N "ldiv" 2 283 ""
V L "numer" 2 283 "sint16" `762 
V L "denom" 2 283 "sint16" `868 
F G "ldiv" 2 284 "ldiv_t(sint16 numer,sint16 denom)" `761 
V L "val" 2 285 "ldiv_t" `866 
F N "atoe" 2 362 ""
V L "s" 2 362 "*int8" `874 
F G "atoe" 2 363 "float(*int8 s)" `751 
V L "pow10" 2 364 "float" `873 
V L "result" 2 365 "float" `874 
V L "sign" 2 366 "int8" `875 
V L "expsign" 2 367 "int8" `876 
V L "c" 2 368 "int8" `877 
V L "ptr" 2 369 "int8" `878 
V L "i" 2 370 "int8" `879 
V L "exp" 2 371 "float" `880 
V L "expcnt" 2 372 "int8" `881 
C L "atoe" 2 398 1 "FUNCTION"
F N "atoi" 2 430 ""
V L "s" 2 430 "*int8" `894 
F G "atoi" 2 431 "sint8(*int8 s)" `729 
V L "result" 2 432 "sint8" `893 
V L "sign" 2 433 "int8" `894 
V L "base" 2 433 "int8" `895 
V L "index" 2 433 "int8" `896 
V L "c" 2 434 "int8" `897 
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
F N "atol" 2 499 ""
V L "s" 2 499 "*int8" `899 
F G "atol" 2 500 "sint16(*int8 s)" `737 
V L "result" 2 501 "sint16" `898 
V L "sign" 2 502 "int8" `899 
V L "base" 2 502 "int8" `900 
V L "index" 2 502 "int8" `901 
V L "c" 2 503 "int8" `902 
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "mult_with10" 2 398 1 "FUNCTION"
F N "mult_with10" 2 566 ""
V L "num" 2 566 "int32" `904 
F G "mult_with10" 2 567 "sint32(int32 num)" `903 
F N "atoi32" 2 572 ""
V L "s" 2 572 "*int8" `906 
F G "atoi32" 2 573 "sint32(*int8 s)" `731 
V L "result" 2 574 "sint32" `905 
V L "sign" 2 575 "int8" `906 
V L "base" 2 575 "int8" `907 
V L "index" 2 575 "int8" `908 
V L "c" 2 576 "int8" `909 
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
F N "itoa" 2 771 ""
V L "num" 2 771 "sint32" `734 
V L "base" 2 771 "int8" `735 
V L "s" 2 771 "*int8" `913 
F G "itoa" 2 772 "*int8(sint32 num,int8 base,*int8 s)" `733 
V L "temp" 2 773 "int32" `910 
V L "i" 2 774 "int8" `911 
V L "sign" 2 774 "int8" `912 
V L "cnt" 2 774 "int8" `913 
V L "c" 2 775 "int8" `914 
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
F N "strtof" 2 886 ""
V L "s" 2 886 "*int8" `748 
V L "endptr" 2 886 "??0 *" `923 
F G "strtof" 2 887 "float(*int8 s,??0 * endptr)" `747 
V L "pow10" 2 888 "float" `921 
V L "result" 2 889 "float" `922 
V L "skip" 2 890 "int1" `923 
V L "sign" 2 890 "int1" `924 
V L "point" 2 890 "int1" `925 
V L "c" 2 891 "int8" `926 
V L "ptr" 2 892 "int8" `927 
F N "strtoul" 2 1105 ""
V L "s" 2 1105 "*int8" `744 
V L "endptr" 2 1105 "*int8" `745 
V L "base" 2 1105 "sint8" `932 
F G "strtoul" 2 1106 "int16(*int8 s,*int8 endptr,sint8 base)" `743 
V L "sc" 2 1107 "*int8" `929 
V L "s1" 2 1107 "*int8" `930 
V L "sd" 2 1107 "*int8" `931 
V L "x" 2 1108 "int16" `932 
V L "sign" 2 1109 "int8" `933 
V L "digits" 2 1110 "int8[1]" `934 
C L "strtoul" 2 398 1 "FUNCTION"
C L "strtoul" 2 398 1 "FUNCTION"
C L "strtoul" 2 398 1 "FUNCTION"
F N "strtol" 2 1167 ""
V L "s" 2 1167 "*int8" `740 
V L "endptr" 2 1167 "*int8" `741 
V L "base" 2 1167 "sint8" `939 
F G "strtol" 2 1168 "sint16(*int8 s,*int8 endptr,sint8 base)" `739 
V L "sc" 2 1169 "*int8" `936 
V L "s1" 2 1169 "*int8" `937 
V L "sd" 2 1169 "*int8" `938 
V L "x" 2 1170 "sint16" `939 
V L "sign" 2 1171 "int8" `940 
V L "digits" 2 1172 "int8[1]" `941 
C L "strtol" 2 398 1 "FUNCTION"
C L "strtol" 2 398 1 "FUNCTION"
C L "strtol" 2 398 1 "FUNCTION"
F N "system" 2 1231 ""
V L "string" 2 1231 "*int8" `944 
F G "system" 2 1232 "sint8(*int8 string)" `756 
F N "mblen" 2 1236 ""
V L "s" 2 1236 "*int8" `944 
V L "n" 2 1236 "int16" `945 
F G "mblen" 2 1237 "int16(*int8 s,int16 n)" `943 
F N "mbtowc" 2 1241 ""
V L "pwc" 2 1241 "*int8" `947 
V L "s" 2 1241 "*int8" `948 
V L "n" 2 1241 "int16" `949 
F G "mbtowc" 2 1242 "int8(*int8 pwc,*int8 s,int16 n)" `946 
F N "wctomb" 2 1247 ""
V L "s" 2 1247 "*int8" `951 
V L "wchar" 2 1247 "int8" `952 
F G "wctomb" 2 1248 "int8(*int8 s,int8 wchar)" `950 
F N "mbstowcs" 2 1253 ""
V L "pwcs" 2 1253 "*int8" `954 
V L "s" 2 1253 "*int8" `955 
V L "n" 2 1253 "int16" `956 
F G "mbstowcs" 2 1254 "int16(*int8 pwcs,*int8 s,int16 n)" `953 
F N "wcstombs" 2 1259 ""
V L "s" 2 1259 "*int8" `958 
V L "pwcs" 2 1259 "*int8" `959 
V L "n" 2 1259 "int16" `960 
F G "wcstombs" 2 1260 "int16(*int8 s,*int8 pwcs,int16 n)" `957 
V G "_Randseed" 2 1269 "int32" `961 
F N "rand" 2 1271 ""
F G "rand" 2 1272 "int16()" `753 
F N "srand" 2 1277 ""
V L "seed" 2 1277 "int32" `966 
F G "srand" 2 1278 "void(int32 seed)" `754 
F N "*_Cmpfun" 2 1287 ""
V L "p1" 2 1287 "*int8" `966 
V L "p2" 2 1287 "*int8" `967 
T G "*_Cmpfun" 2 1287 "sint8(*int8 p1,*int8 p2)" `965 
F N "qsort" 2 1294 ""
V L "qdata" 2 1294 "*int8" `970 
V L "qitems" 2 1294 "int8" `971 
V L "qsize" 2 1294 "int8" `972 
V L "cmp" 2 1294 "_Cmpfun" `973 
F G "qsort" 2 1294 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `969 
V L "m" 2 1295 "int8" `974 
V L "j" 2 1295 "int8" `975 
V L "i" 2 1295 "int8" `976 
V L "l" 2 1295 "int8" `977 
V L "done" 2 1296 "int1" `978 
V L "t" 2 1297 "int8[16]" `979 
F N "bsearch" 2 1322 ""
V L "key" 2 1322 "*int8" `982 
V L "base" 2 1322 "*int8" `983 
V L "num" 2 1322 "int16" `984 
V L "width" 2 1322 "int16" `985 
V L "cmp" 2 1322 "_Cmpfun" `986 
F G "bsearch" 2 1323 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `981 
V L "p" 2 1324 "*int8" `987 
V L "q" 2 1324 "*int8" `988 
V L "n" 2 1325 "int16" `989 
V L "pivot" 2 1326 "int16" `990 
V L "val" 2 1327 "sint8" `991 
C L "bsearch" 2 398 1 "FUNCTION"
D G "LCD_RS" 6 4 "PIN_B1"
D G "LCD_EN" 6 5 "PIN_B0"
D G "LCD_D4" 6 6 "PIN_C7"
D G "LCD_D5" 6 7 "PIN_C6"
D G "LCD_D6" 6 8 "PIN_C5"
D G "LCD_D7" 6 9 "PIN_C4"
D G "Line_1" 6 10 "0x80"
D G "Line_2" 6 11 "0xC0"
D G "Clear_Scr" 6 12 "0x01"
F N "LCD_Init" 6 14 ""
f G "LCD_Init" 6 14 "void()" `999  "ham khoi tao LCD"
F N "LCD_SetPosition" 6 15 ""
V L "cX" 6 15 "int8" `1001 
f G "LCD_SetPosition" 6 15 "void(int8 cX)" `1000  "Thiet lap vi tri con tro"
F N "LCD_PutChar" 6 16 ""
V L "cX" 6 16 "int8" `1003 
f G "LCD_PutChar" 6 16 "void(int8 cX)" `1002  "Ham viet1kitu/1chuoi len LCD"
F N "LCD_PutCmd" 6 17 ""
V L "cX" 6 17 "int8" `1005 
f G "LCD_PutCmd" 6 17 "void(int8 cX)" `1004  "Ham gui lenh len LCD"
F N "LCD_PulseEnable" 6 18 ""
f G "LCD_PulseEnable" 6 18 "void()" `1006  "Xung kich hoat"
F N "LCD_SetData" 6 19 ""
V L "cX" 6 19 "int8" `1008 
f G "LCD_SetData" 6 19 "void(int8 cX)" `1007  "Dat du lieu len chan Data"
C L "LCD_SetData" 6 21 1 "FUNCTION"
F N "LCD_Init" 6 22 ""
F G "LCD_Init" 6 23 "void()" `999 
C L "LCD_Init" 6 21 1 "FUNCTION"
C L "LCD_Init" 6 21 1 "FUNCTION"
C L "LCD_Init" 6 21 1 "FUNCTION"
C L "LCD_Init" 6 21 1 "FUNCTION"
C L "LCD_Init" 6 21 1 "FUNCTION"
C L "LCD_Init" 6 21 1 "FUNCTION"
C L "LCD_Init" 6 21 1 "FUNCTION"
C L "LCD_Init" 6 21 1 "FUNCTION"
C L "LCD_Init" 6 21 2 "FUNCTION"
F N "LCD_SetPosition" 6 42 ""
V L "cX" 6 42 "int8" `1010 
F G "LCD_SetPosition" 6 43 "void(int8 cX)" `1000  "this subroutine works specifically for 4-bit Port A *"
F N "LCD_PutChar" 6 51 ""
V L "cX" 6 51 "int8" `1010 
F G "LCD_PutChar" 6 52 "void(int8 cX)" `1002  "this subroutine works specifically for 4-bit Port A *"
F N "LCD_PutCmd" 6 59 ""
V L "cX" 6 59 "int8" `1010 
F G "LCD_PutCmd" 6 60 "void(int8 cX)" `1004  "this subroutine works specifically for 4-bit Port A *"
C L "LCD_PutCmd" 6 21 1 "FUNCTION"
C L "LCD_PutCmd" 6 21 1 "FUNCTION"
F N "LCD_PulseEnable" 6 69 ""
F G "LCD_PulseEnable" 6 70 "void()" `1006 
C L "LCD_PulseEnable" 6 21 1 "FUNCTION"
C L "LCD_PulseEnable" 6 21 1 "FUNCTION"
F N "LCD_SetData" 6 77 ""
V L "cX" 6 77 "int8" `1010 
F G "LCD_SetData" 6 78 "void(int8 cX)" `1007 
D G "sw_mode" 0 10 "PIN_A3"
D G "sw_up" 0 11 "PIN_A2"
D G "sw_down" 0 12 "PIN_A1"
D G "sw_exit" 0 13 "PIN_A0"
D G "val_mode" 0 15 "() !input(sw_mode)"
D G "val_up" 0 16 "() !input(sw_up)"
D G "val_down" 0 17 "() !input(sw_down)"
D G "val_exit" 0 18 "() !input(sw_exit)"
D G "clock_reset" 0 20 "PIN_A3" "TAO XUNG CHONG TREO"
D G "backligh_lcd" 0 22 "PIN_A4"
D G "backligh_on" 0 23 "() output_high(backligh_lcd);"
D G "backligh_off" 0 24 "() output_low(backligh_lcd);"
D G "cb_mn" 0 26 "PIN_C2"
D G "cb_ac" 0 27 "PIN_C3"
D G "status_mn" 0 29 "() !input(cb_mn)"
D G "status_ac" 0 30 "() !input(cb_ac)"
D G "out_fire" 0 32 "PIN_B2"
D G "out_temp" 0 33 "PIN_B3"
D G "out_error" 0 34 "PIN_B5"
D G "out_delay" 0 35 "PIN_B4"
D G "out_mn" 0 36 "PIN_B6"
D G "out_ac" 0 37 "PIN_B7"
D G "ree" 0 39 "(x) read_eeprom(x);"
D G "wee" 0 40 "(x,y) write_eeprom(x, y);"
D G "tg_tri_hoan" 0 42 "1"
D G "tg_chay_lien_tuc" 0 43 "2"
D G "tg_tam_dung" 0 44 "3"
D G "do_ac" 0 45 "4"
D G "ac_bthg" 0 46 "5"
D G "chay_mpd" 0 47 "6"
D G "error" 0 48 "7"
D G "minute_to_hour" 0 50 "(time) time / 60"
D G "minute_to_minute" 0 51 "(time) time % 60"
D G "sec_to_sec" 0 52 "(time) time % 60"
D G "sec_to_minute" 0 53 "(time) time / 60"
D G "clear_lcd" 0 55 "() lcd_printf(0);"
D G "yesno" 0 56 "() lcd_printf(9);"
D G "loading" 0 57 "() lcd_printf(10);"
D G "sch_1_s_set" 0 59 "() lcd_printf(11);"
D G "timer_tri_hoan_ee" 0 63 "0x00"
D G "counter_restart_mpd_ee" 0 64 "timer_tri_hoan_ee + 1"
D G "timer_chay_lien_tuc_ee" 0 65 "counter_restart_mpd_ee + 1"
D G "timer_tam_dung_ee" 0 66 "timer_chay_lien_tuc_ee + 1"
D G "timer_ktra_AC_ee" 0 67 "timer_tam_dung_ee + 1"
D G "timer_ktra_mn_ee" 0 68 "timer_ktra_AC_ee + 1"
D G "flag_error_ee" 0 69 "timer_ktra_mn_ee + 1"
D G "size_pass" 0 71 "5"
V G "val_number_defaul" 0 74 "int8[11]" `1009 
V G "sch_1" 0 76 "*int8" `1010 
V G "sch_2" 0 76 "*int8" `1011 
V G "val_sch_1" 0 76 "int8" `1012 
V G "val_sch_2" 0 76 "int8" `1013 
V G "password" 0 78 "int8[5]" `1014 
V G "str_temp" 0 79 "int8[25]" `1015 
V G "time_reset_password" 0 80 "int8" `1016 
V G "state_AC" 0 82 "int8" `1017 
V G "mode" 0 83 "int8" `1018 
V G "state_mn" 0 84 "int8" `1019 
V G "refresh_menu" 0 85 "int1" `1020 
V G "timer_exit" 0 87 "int8" `1021 
V G "timer_backlight" 0 88 "int8" `1022 
V G "val_timer_tri_hoan" 0 90 "int8" `1023 
V G "timer_tri_hoan" 0 90 "int8" `1024 
V G "timer_tri_hoan_md" 0 90 "int8" `1025 
V G "val_counter_restart_mpd" 0 91 "int8" `1026 
V G "counter_restart_mpd" 0 91 "int8" `1027 
V G "counter_restart_mpd_md" 0 91 "int8" `1028 
V G "counter_restart_mpd_current" 0 92 "int8" `1029 
V G "val_timer_chay_lien_tuc" 0 93 "int8" `1030 
V G "timer_chay_lien_tuc" 0 93 "int8" `1031 
V G "timer_chay_lien_tuc_md" 0 93 "int8" `1032 
V G "val_timer_tam_dung" 0 94 "int8" `1033 
V G "timer_tam_dung" 0 94 "int8" `1034 
V G "timer_tam_dung_md" 0 94 "int8" `1035 
V G "val_timer_ktra_AC" 0 95 "int8" `1036 
V G "timer_ktra_AC" 0 95 "int8" `1037 
V G "timer_ktra_AC_md" 0 95 "int8" `1038 
V G "val_timer_ktra_mn" 0 96 "int8" `1039 
V G "timer_ktra_mn" 0 96 "int8" `1040 
V G "timer_ktra_mn_md" 0 96 "int8" `1041 
V G "val_timer_on_mpd" 0 97 "int8" `1042 
V G "timer_on_mpd" 0 97 "int8" `1043 
V G "val_timer_off_mpd" 0 98 "int8" `1044 
V G "timer_off_mpd" 0 98 "int8" `1045 
V G "val_loading" 0 100 "int8" `1046 
V G "flag_error" 0 102 "int8" `1047 
V G "flag_mn" 0 103 "int8" `1048 
V G "counter_timer0" 0 105 "int16" `1049 
V G "flag_timer_tri_hoan_60s" 0 106 "int8" `1050 
V G "flag_timer_60s_password" 0 106 "int8" `1051 
V G "flag_timer_tam_dung_60s" 0 106 "int8" `1052 
V G "flag_timer_chay_lien_tuc_60s" 0 107 "int8" `1053 
V G "flag_timer_chay_lien_tuc_60p" 0 107 "int8" `1054 
V G "pwm_lcd" 0 109 "int8" `1055 
V G "sum_out" 0 110 "int8" `1056 
V G "sum_out_old" 0 110 "int8" `1057 
V G "loop_not_display" 0 110 "int8" `1058 
F N "init_data" 0 113 ""
f G "init_data" 0 113 "void()" `1059 
F N "check_AC" 0 114 ""
f G "check_AC" 0 114 "void()" `1060 
F N "check_mn" 0 115 ""
f G "check_mn" 0 115 "int8()" `1061 
F N "default_data" 0 116 ""
f G "default_data" 0 116 "void()" `1062 
F N "display" 0 117 ""
V L "code_print" 0 117 "int8" `1064 
f G "display" 0 117 "void(int8 code_print)" `1063 
F N "key_scan" 0 118 ""
f G "key_scan" 0 118 "int8()" `1065 
F N "process_menu" 0 119 ""
f G "process_menu" 0 119 "void()" `1066 
F N "process_up" 0 120 ""
f G "process_up" 0 120 "void()" `1067 
F N "process_down" 0 121 ""
f G "process_down" 0 121 "void()" `1068 
F N "process_exit" 0 122 ""
f G "process_exit" 0 122 "void()" `1069 
F N "display_center" 0 123 ""
f G "display_center" 0 123 "void()" `1070 
F N "lcd_printf" 0 124 ""
V L "code_printf" 0 124 "int8" `1072 
f G "lcd_printf" 0 124 "void(int8 code_printf)" `1071 
F N "reset_timer_data" 0 125 ""
f G "reset_timer_data" 0 125 "void()" `1073 
F N "write_data" 0 126 ""
f G "write_data" 0 126 "void()" `1074 
F N "read_data" 0 127 ""
f G "read_data" 0 127 "void()" `1075 
F N "read_eeprom" 0 129 ""
V L "addr" 0 129 "int8" `1077 
f G "read_eeprom" 0 129 "int8(int8 addr)" `1076 
F N "write_eeprom" 0 130 ""
V L "addr" 0 130 "int8" `1079 
V L "value" 0 130 "int8" `1080 
f G "write_eeprom" 0 130 "void(int8 addr,int8 value)" `1078 
F N "disable_reset" 0 132 ""
f G "disable_reset" 0 132 "void()" `1081  ""
F N "MAIN" 0 135 ""
F G "MAIN" 0 136 "void()" `1082  "chong treo xu li"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
V L "mn" 0 192 "int8" `1085 
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
V L "mn" 0 219 "int8" `1086 
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 2 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
C L "MAIN" 0 61 1 "FUNCTION"
F N "init_data" 0 342 ""
F G "init_data" 0 343 "void()" `1059  "con tro phuc vu cai dat"
C L "init_data" 0 61 1 "FUNCTION"
C L "init_data" 0 61 1 "FUNCTION"
C L "init_data" 0 61 1 "FUNCTION"
C L "init_data" 0 61 1 "FUNCTION"
C L "init_data" 0 61 1 "FUNCTION"
C L "init_data" 0 61 1 "FUNCTION"
F N "check_mn" 0 375 ""
F G "check_mn" 0 376 "int8()" `1061 
C L "check_mn" 0 61 1 "FUNCTION"
C L "check_mn" 0 61 1 "FUNCTION"
C L "check_mn" 0 61 1 "FUNCTION"
F N "check_AC" 0 392 ""
F G "check_AC" 0 393 "void()" `1060 
C L "check_AC" 0 61 1 "FUNCTION"
C L "check_AC" 0 61 1 "FUNCTION"
F N "display" 0 420 ""
V L "code_print" 0 420 "int8" `1092 
F G "display" 0 421 "void(int8 code_print)" `1063 
C L "display" 0 61 1 "FUNCTION"
C L "display" 0 61 1 "FUNCTION"
C L "display" 0 61 1 "FUNCTION"
C L "display" 0 61 1 "FUNCTION"
C L "display" 0 61 1 "FUNCTION"
C L "display" 0 61 1 "FUNCTION"
C L "display" 0 61 1 "FUNCTION"
C L "display" 0 61 1 "FUNCTION"
F N "default_data" 0 495 ""
F G "default_data" 0 496 "void()" `1062 
C L "default_data" 0 61 1 "FUNCTION"
C L "default_data" 0 61 1 "FUNCTION"
C L "default_data" 0 61 1 "FUNCTION"
C L "default_data" 0 61 1 "FUNCTION"
C L "default_data" 0 61 1 "FUNCTION"
C L "default_data" 0 61 1 "FUNCTION"
C L "default_data" 0 61 1 "FUNCTION"
F N "display_center" 0 505 ""
F G "display_center" 0 506 "void()" `1070 
V L "menu_main" 0 508 "int8[10][17]" `1118 
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
C L "display_center" 0 61 1 "FUNCTION"
F N "reset_timer_data" 0 607 ""
F G "reset_timer_data" 0 608 "void()" `1073 
F N "lcd_printf" 0 621 ""
V L "code_printf" 0 621 "int8" `1131 
F G "lcd_printf" 0 622 "void(int8 code_printf)" `1071 
F N "key_scan" 0 675 ""
F G "key_scan" 0 676 "int8()" `1065 
V L "bounce" 0 677 "int16" `1141 
F N "process_menu" 0 742 ""
F G "process_menu" 0 743 "void()" `1066 
C L "process_menu" 0 61 1 "FUNCTION"
C L "process_menu" 0 61 1 "FUNCTION"
F N "process_up" 0 772 ""
F G "process_up" 0 773 "void()" `1067 
C L "process_up" 0 61 1 "FUNCTION"
C L "process_up" 0 61 1 "FUNCTION"
C L "process_up" 0 61 1 "FUNCTION"
C L "process_up" 0 61 1 "FUNCTION"
C L "process_up" 0 61 1 "FUNCTION"
C L "process_up" 0 61 1 "FUNCTION"
C L "process_up" 0 61 1 "FUNCTION"
C L "process_up" 0 61 1 "FUNCTION"
C L "process_up" 0 61 1 "FUNCTION"
C L "process_up" 0 61 1 "FUNCTION"
F N "process_down" 0 839 ""
F G "process_down" 0 840 "void()" `1068 
C L "process_down" 0 61 1 "FUNCTION"
C L "process_down" 0 61 1 "FUNCTION"
C L "process_down" 0 61 1 "FUNCTION"
C L "process_down" 0 61 1 "FUNCTION"
C L "process_down" 0 61 1 "FUNCTION"
C L "process_down" 0 61 1 "FUNCTION"
C L "process_down" 0 61 1 "FUNCTION"
C L "process_down" 0 61 1 "FUNCTION"
C L "process_down" 0 61 1 "FUNCTION"
C L "process_down" 0 61 1 "FUNCTION"
F N "process_exit" 0 904 ""
F G "process_exit" 0 905 "void()" `1069 
V L "val_null" 0 907 "int8" `1144 
C L "process_exit" 0 61 1 "FUNCTION"
C L "process_exit" 0 61 1 "FUNCTION"
F N "write_data" 0 931 ""
F G "write_data" 0 932 "void()" `1074 
F N "read_data" 0 943 ""
F G "read_data" 0 944 "void()" `1075 
F N "disable_reset" 0 954 ""
F G "disable_reset" 0 955 "void()" `1081 
F N "interrupt_timer0" 0 972 ""
F G "interrupt_timer0" 0 973 "void()" `1145 
C L "interrupt_timer0" 0 61 1 "FUNCTION"
C L "interrupt_timer0" 0 61 1 "FUNCTION"
C L "interrupt_timer0" 0 61 1 "FUNCTION"
C L "interrupt_timer0" 0 61 1 "FUNCTION"
C L "interrupt_timer0" 0 61 1 "FUNCTION"
C L "interrupt_timer0" 0 61 1 "FUNCTION"
C L "interrupt_timer0" 0 61 1 "FUNCTION"
C L "interrupt_timer0" 0 61 1 "FUNCTION"
C L "interrupt_timer0" 0 61 1 "FUNCTION"
C L "interrupt_timer0" 0 61 1 "FUNCTION"
C L "interrupt_timer0" 0 61 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_e" 1 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
